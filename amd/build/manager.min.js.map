{"version":3,"file":"manager.min.js","sources":["../src/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     customfield_sprogramme/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'customfield_sprogramme/local/state';\nimport Repository from 'customfield_sprogramme/local/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport {debounce} from 'core/utils';\nimport './local/components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The courseid.\n     * @type {Number}\n     */\n    courseid;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * The table name.\n     */\n    table = 'customfield_sprogramme';\n\n    /**\n     * The table columns.\n     * @type {Array}\n     */\n    columns = [];\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} courseid The courseid.\n     * @return {void}\n     */\n    constructor(element, courseid) {\n        this.element = element;\n        this.courseid = parseInt(courseid);\n        this.addEventListeners();\n        this.getDatagrid();\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const form = document.querySelector('[data-region=\"app\"]');\n        form.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        form.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n            const modulename = e.target.closest('[data-region=\"modulename\"]');\n            if (modulename) {\n                this.changeModule(modulename);\n            }\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        form.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n                e.preventDefault();\n            }\n            if (e.key === 'Enter') {\n                e.preventDefault();\n            }\n        });\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n        });\n\n        let dragging = null;\n\n        form.addEventListener('dragstart', (e) => {\n            if (e.target.tagName === 'TR') {\n                dragging = e.target;\n                e.target.effectAllowed = 'move';\n            }\n        });\n        form.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('tr');\n            if (target && target !== dragging && target.parentNode.dataset.region === 'rows') {\n                const rect = target.getBoundingClientRect();\n                if (e.clientY - rect.top > rect.height / 2) {\n                    target.parentNode.insertBefore(dragging, target.nextSibling);\n                } else {\n                    target.parentNode.insertBefore(dragging, target);\n                }\n            }\n        });\n        form.addEventListener(\"drop\", (e) => {\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        form.addEventListener('dragend', (e) => {\n            const rowId = dragging.dataset.index;\n            const prevRowId = dragging.previousElementSibling ? dragging.previousElementSibling.dataset.index : 0;\n            const moduleId = dragging.closest('[data-region=\"module\"]').dataset.id;\n            Repository.updateSortOrder(\n                {\n                    type: 'row',\n                    courseid: this.courseid,\n                    moduleid: moduleId,\n                    id: rowId,\n                    previd: prevRowId\n                }\n            );\n            dragging = null;\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        // Disciplines form typeahead, using .disciplineform input[type=\"search\"]\n        // All options are already in the DOM, just show and hide them.\n        // On select return the discipline id and add it in this form to the cell\n        // {id: 1, value: 20}, {id: 2, value: 60}, {id: 7, value: 20}\n        // The value is set to 100 for now, this will be updated later in this code by adding another input field.\n        const disciplineForm = document.querySelector('[data-region=\"disciplineform\"]');\n        const search = disciplineForm.querySelector('input[type=\"search\"]');\n        search.addEventListener('input', (e) => {\n            const input = e.target.closest('input');\n            if (input) {\n                this.typeahead(input);\n            }\n        });\n\n        // Listen for the saveconfirm custom event. When run save the table data.\n        document.addEventListener('saveconfirm', () => {\n            this.setTableData();\n        });\n    }\n\n    async getDatagrid() {\n        await this.getTableData();\n        await this.getTableConfig();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        const response = await Repository.getColumns({courseid: this.courseid});\n        await State.setValue('columns', response.columns);\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({courseid: this.courseid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.modules.length > 0) {\n                const modules = this.parseModules(response.modules);\n                State.setValue('modules', modules);\n            } else {\n                const moduleid = await this.createModule('Module 1', 0);\n                await this.createRow(moduleid, 0, 0);\n                this.getTableData();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the modules, add the correct column properties to each cell.\n     * @param {Array} modules The modules.\n     * @return {Array} The parsed rows.\n     */\n    parseModules(modules) {\n        modules.forEach(mod => {\n            mod.rows.map(row => {\n                row.cells = row.cells.map(cell => {\n                    const column = mod.columns.find(column => column.column == cell.column);\n                    // Clone the column properties to the cell but keep the cell properties.\n                    cell = Object.assign({}, cell, column);\n                    if (cell.type === 'select') {\n                        // Clone the options array to avoid shared references\n                        cell.options = cell.options.map(option => {\n                            const clonedOption = Object.assign({}, option);\n                            if (clonedOption.name == cell.value) {\n                                clonedOption.selected = true;\n                            }\n                            return clonedOption;\n                        });\n                    }\n                    cell.edit = true;\n                    return cell;\n                });\n                return row;\n            });\n        });\n        return modules;\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n                'disciplines': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n                'competencies': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n            },\n        };\n    }\n\n    /**\n     * Check the cell value. It can not exceed the cell length.\n     * @param {object} cell The cell.\n     * @return {void}\n     */\n    checkCellValue(cell) {\n        if (cell.value === null) {\n            return;\n        }\n        if (cell.type === 'text' && cell.value.length > cell.length) {\n            cell.value = cell.value.substring(0, cell.length);\n        }\n    }\n\n\n    /**\n     * Clean the Modules array.\n     * @param {Array} modules The modules.\n     * @return {Array} The cleaned modules.\n     */\n    cleanModules(modules) {\n        const cleanedModules = [];\n        modules.forEach(module => {\n            const rows = module.rows;\n            const rowObject = this.getRowObject();\n            const cleanedRows = rows.map(row => {\n                const cleanedRow = {};\n                Object.keys(rowObject.rows).forEach(key => {\n                    cleanedRow[key] = row[key];\n                });\n                // Clean the cells.\n                cleanedRow.cells = row.cells.map(cell => {\n                    const cleanedCell = {};\n                    this.checkCellValue(cell);\n                    Object.keys(rowObject.rows.cells).forEach(key => {\n                        cleanedCell[key] = cell[key];\n                    });\n                    return cleanedCell;\n                });\n                // Clean the disciplines.\n                cleanedRow.disciplines = row.disciplines.map(discipline => {\n                    const cleanedDiscipline = {};\n                    Object.keys(rowObject.rows.disciplines).forEach(key => {\n                        cleanedDiscipline[key] = discipline[key];\n                    });\n                    return cleanedDiscipline;\n                });\n                // Clean the competencies.\n                cleanedRow.competencies = row.competencies.map(competency => {\n                    const cleanedCompetency = {};\n                    Object.keys(rowObject.rows.competencies).forEach(key => {\n                        cleanedCompetency[key] = competency[key];\n                    });\n                    return cleanedCompetency;\n                });\n                return cleanedRow;\n            });\n            const cleanedModule = {};\n            cleanedModule.id = module.moduleid;\n            cleanedModule.sortorder = module.modulesortorder;\n            cleanedModule.name = module.modulename;\n            cleanedModule.rows = cleanedRows;\n            cleanedModules.push(cleanedModule);\n        });\n        return cleanedModules;\n    }\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            const saveConfirmButton = document.querySelector('[data-action=\"saveconfirm\"]');\n            saveConfirmButton.classList.add('saving');\n            const modules = State.getValue('modules');\n            const cleanedModules = this.cleanModules(modules);\n            const response = await Repository.setData({courseid: this.courseid, modules: cleanedModules});\n            if (!response) {\n                Notification.exception('No response from the server');\n            }\n            setTimeout(() => {\n                saveConfirmButton.classList.remove('saving');\n            }, 200);\n        }, 600);\n        set();\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'addrow') {\n            this.addRow(btn);\n        }\n        if (btn.dataset.action === 'deleterow') {\n            this.deleteRow(btn);\n        }\n        if (btn.dataset.action === 'addmodule') {\n            this.addModule(btn);\n        }\n        if (btn.dataset.action === 'deletemodule') {\n            this.deleteModule(btn);\n        }\n        if (btn.dataset.action === 'adddisc') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'addcomp') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'removedisc') {\n            this.removeDiscipline(btn);\n        }\n        if (btn.dataset.action === 'closedisciplineform') {\n            this.closeDisciplineForm();\n        }\n        if (btn.dataset.action === 'selectdiscipline') {\n            const option = btn.closest('[data-option]');\n            const discipline = {\n                id: option.dataset.id,\n                name: option.textContent,\n            };\n            this.setDisciplineForm(discipline);\n        }\n        if (btn.dataset.action === 'discipline-confirm') {\n            this.addDiscipline();\n        }\n        if (btn.dataset.action === 'saveconfirm') {\n            this.setTableData();\n        }\n        if (btn.dataset.action === 'loaddiscipline') {\n            this.loadDiscipline(btn);\n        }\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async addRow(btn) {\n        const modules = State.getValue('modules');\n\n        let rowid = btn.dataset.id;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const rows = module.rows;\n        // When called from the link under the table, the rowid is not set.\n        if (rowid == -1) {\n            rowid = rows[rows.length - 1].id;\n        }\n\n        const row = await this.createRow(moduleid, rowid);\n        if (!row) {\n            return;\n        }\n        // Inject the row after the clicked row.\n        rows.splice(rows.indexOf(rows.find(r => r.id == rowid)) + 1, 0, row);\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Create a new row.\n     *\n     * @param {Number} moduleid The moduleid.\n     * @param {Number} prevrowid The previous rowid.\n     * @return {Promise} The promise.\n     */\n    async createRow(moduleid, prevrowid) {\n        const rowid = await Repository.createRow({courseid: this.courseid, moduleid: moduleid, prevrowid: prevrowid});\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            row.disciplines = [];\n            row.competencies = [];\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async deleteRow(btn) {\n        const modules = State.getValue('modules');\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteRow({courseid: this.courseid, rowid: rowid});\n        return new Promise((resolve) => {\n            if (response) {\n                const rows = module.rows;\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('modules', modules);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            // Find the correct cell in the row.\n            const rowIndex = module.rows.findIndex(r => r.id == index);\n            if (rowIndex === -1) {\n                return;\n            }\n            const cellIndex = module.rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n            module.rows[rowIndex].cells[cellIndex].value = value;\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Change the module name.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    changeModule(input) {\n        const module = input.closest('[data-region=\"module\"]');\n        const moduleid = module.dataset.id;\n        const name = input.value;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            if (module.moduleid == moduleid) {\n                module.modulename = name;\n            }\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Delete a module.\n     * @param {object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     * @return {void}\n     */\n    async deleteModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteModule({courseid: this.courseid, moduleid: moduleid});\n        return new Promise((resolve) => {\n            if (response) {\n                const index = modules.indexOf(module);\n                modules.splice(index, 1);\n                State.setValue('modules', modules);\n            }\n            resolve(moduleid);\n        });\n    }\n\n    /**\n     * Create a new module.\n     * @param {String} name The name.\n     * @param {Number} index The index.\n     * @return {Promise} The promise.\n     */\n    async createModule(name, index) {\n        const id = await Repository.createModule({name: name, courseid: this.courseid, sortorder: index});\n        return new Promise((resolve) => {\n            resolve(id);\n        });\n    }\n\n    /**\n     * Add a new module.\n     * @return {void}\n     */\n    async addModule() {\n        const modules = State.getValue('modules');\n        const moduleid = await this.createModule(' ', 0);\n        const row = await this.createRow(moduleid, 0);\n        const module = {\n            moduleid: moduleid,\n            modulename: ' ',\n            rows: [row],\n        };\n        modules.push(module);\n        this.resetRowSortorder();\n        State.setValue('modules', modules);\n        this.setTableData();\n    }\n\n    /**\n     * Get the row from the state.\n     * @param {int} rowid The rowid.\n     */\n    getRow(rowid) {\n        const modules = State.getValue('modules');\n        // Combine all rows in one array.\n        const rows = modules.reduce((acc, module) => {\n            return acc.concat(module.rows);\n        }, []);\n        const row = rows.find(r => r.id == rowid);\n        return row;\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const modules = State.getValue('modules');\n        modules.forEach((module, mindex) => {\n            module.modulesortorder = mindex;\n            module.rows.forEach((row, index) => {\n                row.sortorder = index;\n            });\n        });\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Typeahead.\n     * Limit to 5 options.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    typeahead(input) {\n        const value = input.value;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const options = form.querySelectorAll('[data-option]');\n        options.forEach(option => {\n            this.removeMatchBold(option);\n            if (option.textContent.toLowerCase().includes(value.toLowerCase())) {\n                option.classList.remove('d-none');\n                this.makeMatchBold(option, value);\n            } else {\n                option.classList.add('d-none');\n            }\n        });\n    }\n\n    /**\n     * Make the match bold.\n     * @param {object} option The option.\n     * @param {string} value The value.\n     * @return {void}\n     */\n    makeMatchBold(option, value) {\n        const text = option.textContent;\n        const index = text.toLowerCase().indexOf(value.toLowerCase());\n        const first = text.slice(0, index);\n        const match = text.slice(index, index + value.length);\n        const last = text.slice(index + value.length);\n        option.innerHTML = first + '<strong>' + match + '</strong>' + last;\n    }\n\n    /**\n     * Remove the match bold.\n     * @param {object} option The option.\n     * @return {void}\n     */\n    removeMatchBold(option) {\n        option.innerHTML = option.textContent;\n    }\n\n    /**\n     * Add a discipline to the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async showDisciplineForm(btn) {\n        const btnAction = btn.dataset.action;\n        const region = btnAction === 'adddisc' ? 'data-disciplines' : 'data-competencies';\n        const row = btn.closest('[data-row]');\n        const module = btn.closest('[data-region=\"module\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        form.classList.remove('data-disciplines', 'data-competencies');\n        form.classList.add(region);\n        form.querySelector('#rowid').value = row.dataset.index;\n        const arrow = form.querySelector('.formarrow');\n        form.querySelector('#discipline-value').value = '';\n        form.querySelector('#discipline-name').value = '';\n\n        // Get the row index nr based on the row position in the table.\n        const rows = module.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const rowArray = Array.from(rows);\n        const index = rowArray.indexOf(row);\n        // Set the title of the form to show the row number.\n        form.querySelector('[data-region=\"rownumber\"]').textContent =\n            await getString('row', 'customfield_sprogramme', index + 1);\n        form.dataset.action = region;\n\n        // Attache the form to the first row for the first 8 rows.\n        // Then attach it to 8 rows before the clicked row.\n        // This makes sure the form is always visible.\n        const setindex = index - 8;\n        let attachTo;\n        let attachToButton;\n        if (setindex > 0) {\n            attachTo = rowArray[setindex].querySelector(`[${region}]`);\n            attachToButton = rowArray[setindex].querySelector(`[data-action=\"${btnAction}\"]`);\n        } else {\n            attachTo = rowArray[0].querySelector(`[${region}]`);\n            attachToButton = rowArray[0].querySelector(`[data-action=\"${btnAction}\"]`);\n        }\n        attachTo.appendChild(form);\n\n        // Position the form arrow next to the button that was clicked.\n        const rectBtn = btn.getBoundingClientRect();\n        const rectAttachToButton = attachToButton.getBoundingClientRect();\n        arrow.style.top = rectBtn.top - rectAttachToButton.top + 'px';\n        this.renderFormDisciplines(row.dataset.index, region);\n    }\n\n    /**\n     * Remove the discipline form.\n     * @return {void}\n     */\n    closeDisciplineForm() {\n        const container = document.querySelector('[data-region=\"disciplineform-container\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        container.appendChild(form);\n    }\n\n    /**\n     * Select a discipline.\n     * @param {object} discipline The discipline.\n     * @return {void}\n     */\n    async setDisciplineForm(discipline) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const formFieldSearch = form.querySelector('input[type=\"search\"]');\n        const formFieldValue = form.querySelector('#discipline-value');\n        const formFieldDiscipline = form.querySelector('#discipline-id');\n        const formFieldDisciplineName = form.querySelector('#discipline-name');\n        const formFieldLastIds = form.querySelector('#lastids');\n\n        formFieldDiscipline.value = discipline.id;\n        formFieldDisciplineName.value = discipline.name;\n        formFieldSearch.value = discipline.name;\n\n        // Add the discipline id to the formFieldLastIds.\n        const lastIds = formFieldLastIds.value.split(',');\n        if (!lastIds.includes(discipline.id)) {\n            lastIds.push(discipline.id);\n            formFieldLastIds.value = lastIds.join(',');\n        }\n        formFieldValue.focus();\n    }\n\n    /**\n     * Get the selected discipline.\n     * @param {object} form The form.\n     * @return {Promise} The promise.\n     */\n    async getSelectedDiscipline(form) {\n        const action = form.dataset.action;\n        const disciplineid = form.querySelector('#discipline-id').value;\n        const disciplinevalue = form.querySelector('#discipline-value').value;\n        const disciplinename = form.querySelector('#discipline-name').value;\n\n        if (!disciplineid || !disciplinevalue || !disciplinename) {\n            form.querySelector('[data-region=\"warnings\"]').innerHTML = 'Invalid input';\n            return false;\n        }\n        const availableDisciplines = form.querySelectorAll(`[data-list=\"${action}\"] [data-action=\"selectdiscipline\"]`);\n        // Find the discipline in the available disciplines based on the discipline id.\n        const listedDiscipline = Array.from(availableDisciplines).find(d => d.dataset.id == disciplineid);\n        if (!listedDiscipline || listedDiscipline.textContent !== disciplinename) {\n            form.querySelector('[data-region=\"warnings\"]').innerHTML =\n                await getString('invalidinput', 'customfield_sprogramme');\n            return false;\n        }\n        const displine = {\n            id: disciplineid,\n            name: disciplinename,\n            percentage: parseInt(disciplinevalue),\n        };\n        // Return a promise.\n        return new Promise((resolve) => {\n            resolve(displine);\n        });\n    }\n\n    /**\n     * Load the discipline in the form.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    loadDiscipline(btn) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        form.querySelector('#discipline-id').value = btn.dataset.id;\n        form.querySelector('#discipline-name').value = btn.dataset.name;\n        form.querySelector('#discipline-value').value = btn.dataset.percentage;\n        form.querySelector('#discipline-value').focus();\n    }\n\n    // Add a discipline to the row.\n    async addDiscipline() {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const action = form.dataset.action;\n        const discipline = await this.getSelectedDiscipline(form);\n        if (!discipline) {\n            return;\n        }\n        const rowid = form.querySelector('#rowid').value;\n        const row = this.getRow(rowid);\n        // Update or add the discipline to the row.\n        const containername = action === 'data-disciplines' ? 'container-disciplines' : 'container-competencies';\n        let disciplineIndex = 0;\n        let maxpercentage = 100;\n        if (action === 'data-disciplines') {\n            disciplineIndex = row.disciplines.findIndex(d => d.id == discipline.id);\n            maxpercentage = 100 - row.disciplines.reduce((acc, comp) => acc + parseInt(comp.percentage), 0);\n\n        }\n        if (action === 'data-competencies') {\n            disciplineIndex = row.competencies.findIndex(d => d.id == discipline.id);\n            maxpercentage = 100 - row.competencies.reduce((acc, disc) => acc + parseInt(disc.percentage), 0);\n        }\n        if (discipline.percentage > maxpercentage) {\n            form.querySelector('[data-region=\"warnings\"]').innerHTML =\n                await getString('maxpercentage', 'customfield_sprogramme', maxpercentage);\n            return;\n        } else {\n            form.querySelector('[data-region=\"warnings\"]').innerHTML = '';\n        }\n        const container = document.querySelector(\n            `[${action}][data-rowid=\"${rowid}\"] [data-region=\"${containername}\"]`);\n        const selectedcontainer = form.querySelector('[data-region=\"selected-disciplines\"]');\n        if (disciplineIndex > -1) {\n            if (action === 'data-disciplines') {\n                row.disciplines[disciplineIndex] = discipline;\n            }\n            if (action === 'data-competencies') {\n                row.competencies[disciplineIndex] = discipline;\n            }\n            const rendered = container.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const selected = selectedcontainer.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.replaceNode(rendered, html, js);\n            await Templates.replaceNode(selected, html, js);\n\n        } else {\n            if (action === 'data-disciplines') {\n                row.disciplines.push(discipline);\n            }\n            if (action === 'data-competencies') {\n                row.competencies.push(discipline);\n            }\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.appendNodeContents(container, html, js);\n            await Templates.appendNodeContents(selectedcontainer, html, js);\n        }\n        this.setTableData();\n    }\n\n    /**\n     * Render the disciplines in the form.\n     * @param {int} rowid The rowid.\n     * @param {String} region The region.\n     * @return {void}\n     */\n    async renderFormDisciplines(rowid, region) {\n        const row = this.getRow(rowid);\n        let disciplines = [];\n        if (region === 'data-disciplines') {\n            disciplines = row.disciplines;\n        }\n        if (region === 'data-competencies') {\n            disciplines = row.competencies;\n        }\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const container = form.querySelector('[data-region=\"selected-disciplines\"]');\n        container.innerHTML = '';\n        disciplines.forEach(async(discipline) => {\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            Templates.appendNodeContents(container, html, js);\n        });\n    }\n\n    /**\n     * Remove a discipline from the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async removeDiscipline(btn) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const action = form.dataset.action;\n        const containername = action === 'data-disciplines' ? 'container-disciplines' : 'container-competencies';\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = btn.closest('[data-id]').dataset.id;\n\n        // Remove the discipline from the row.\n        if (action === 'data-disciplines') {\n            const row = this.getRow(rowid);\n            const index = row.disciplines.findIndex(d => d.id == disciplineid);\n            row.disciplines.splice(index, 1);\n        }\n        if (action === 'data-competencies') {\n            const row = this.getRow(rowid);\n            const index = row.competencies.findIndex(d => d.id == disciplineid);\n            row.competencies.splice(index, 1);\n        }\n\n        // Remove the discipline/competency from the view.\n        const container = document.querySelector(\n            `[${action}][data-rowid=\"${rowid}\"] [data-region=\"${containername}\"]`);\n        const selectedcontainer = document.querySelector('[data-region=\"selected-disciplines\"]');\n        const discipline = container.querySelector('[data-id=\"' + disciplineid + '\"]');\n        const selected = selectedcontainer.querySelector('[data-id=\"' + disciplineid + '\"]');\n        container.removeChild(discipline);\n        selectedcontainer.removeChild(selected);\n        this.setTableData();\n    }\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n */\nconst init = (element, courseid) => {\n    new Manager(element, courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","element","courseid","parseInt","addEventListeners","getDatagrid","form","document","querySelector","addEventListener","e","btn","target","closest","preventDefault","actions","input","change","modulename","changeModule","key","navigate","dragging","tagName","effectAllowed","parentNode","dataset","region","rect","getBoundingClientRect","clientY","top","height","insertBefore","nextSibling","rowId","index","prevRowId","previousElementSibling","moduleId","id","updateSortOrder","type","this","moduleid","previd","typeahead","setTableData","getTableData","getTableConfig","response","Repository","getColumns","State","setValue","columns","getData","modules","length","parseModules","createModule","createRow","error","exception","forEach","mod","rows","map","row","cells","cell","column","find","Object","assign","options","option","clonedOption","name","value","selected","edit","getRowObject","checkCellValue","substring","cleanModules","cleanedModules","module","rowObject","cleanedRows","cleanedRow","keys","cleanedCell","disciplines","discipline","cleanedDiscipline","competencies","competency","cleanedCompetency","cleanedModule","sortorder","modulesortorder","push","async","saveConfirmButton","classList","add","getValue","setData","setTimeout","remove","set","action","addRow","deleteRow","addModule","deleteModule","showDisciplineForm","removeDiscipline","closeDisciplineForm","textContent","setDisciplineForm","addDiscipline","loadDiscipline","rowid","m","splice","indexOf","r","prevrowid","Promise","resolve","undefined","structuredClone","Array","from","children","resetRowSortorder","columnid","rowIndex","findIndex","cellIndex","c","getRow","reduce","acc","concat","mindex","querySelectorAll","removeMatchBold","toLowerCase","includes","makeMatchBold","text","first","slice","match","last","innerHTML","btnAction","arrow","rowArray","setindex","attachTo","attachToButton","appendChild","rectBtn","rectAttachToButton","style","renderFormDisciplines","container","formFieldSearch","formFieldValue","formFieldDiscipline","formFieldDisciplineName","formFieldLastIds","lastIds","split","join","focus","disciplineid","disciplinevalue","disciplinename","availableDisciplines","listedDiscipline","d","displine","percentage","getSelectedDiscipline","containername","disciplineIndex","maxpercentage","comp","disc","selectedcontainer","rendered","html","js","Templates","renderForPromise","replaceNode","appendNodeContents","removeChild","currentIndex","currentColumn","allRows","i","nextInput","previousInput","nextColumn","nextElementSibling","previousColumn","init"],"mappings":"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"}