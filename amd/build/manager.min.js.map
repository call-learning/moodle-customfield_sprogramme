{"version":3,"file":"manager.min.js","sources":["../src/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     customfield_sprogramme/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'customfield_sprogramme/local/state';\nimport Repository from 'customfield_sprogramme/local/repository';\nimport Notification from 'core/notification';\nimport {debounce} from 'core/utils';\nimport './local/components/table';\n\n\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The courseid.\n     * @type {Number}\n     */\n    courseid;\n\n    /**\n     * The table name.\n     */\n    table = 'customfield_sprogramme';\n\n    /**\n     * Constructor.\n     * @param {String} courseid The courseid.\n     * @return {void}\n     */\n    constructor(courseid) {\n        this.courseid = parseInt(courseid);\n        this.addEventListeners();\n        this.getDatagrid();\n    }\n\n    async getDatagrid() {\n        await this.getTableConfig();\n        await this.getTableData();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        try {\n            const response = await Repository.getColumns({table: this.table});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            const json = this.parseResponse(response);\n            if (json) {\n                await State.setValue('columns', json);\n            } else {\n                Notification.exception('The response is not valid JSON');\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({courseid: this.courseid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.rows.length > 0) {\n                const rows = this.parseRows(response.rows);\n                State.setValue('rows', rows);\n            } else {\n                const row = await this.createRow(0);\n                State.setValue('rows', [row]);\n                this.resetRowSortorder();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the rows, add the correct column properties to each cell.\n     * @param {Array} rows The rows.\n     * @return {Array} The parsed rows.\n     */\n    parseRows(rows) {\n        const columns = State.getValue('columns');\n        return rows.map(row => {\n            row.cells = row.cells.map(cell => {\n                const column = columns.find(column => column.column == cell.column);\n                // Clone the column properties to the cell but keep the cell properties.\n                cell = Object.assign({}, cell, column);\n                cell[cell.type] = true;\n                cell.edit = true;\n                return cell;\n            });\n            return row;\n        });\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n            },\n        };\n    }\n\n    /**\n     * Clean the rows object.\n     * @param {Array} rows The rows.\n     * @return {Array} The cleaned rows.\n     */\n    cleanRows(rows) {\n        const rowObject = this.getRowObject();\n        const cleanedRows = rows.map(row => {\n            const cleanedRow = {};\n            Object.keys(rowObject.rows).forEach(key => {\n                cleanedRow[key] = row[key];\n            });\n            // Clean the cells.\n            cleanedRow.cells = row.cells.map(cell => {\n                const cleanedCell = {};\n                Object.keys(rowObject.rows.cells).forEach(key => {\n                    cleanedCell[key] = cell[key];\n                });\n                return cleanedCell;\n            });\n            return cleanedRow;\n        });\n        window.console.log(JSON.stringify(cleanedRows));\n        return cleanedRows;\n    }\n\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            try {\n                const rows = State.getValue('rows');\n                const response = await Repository.setData({courseid: this.courseid, rows: this.cleanRows(rows)});\n                if (!response) {\n                    Notification.exception('No response from the server');\n                }\n            } catch (error) {\n                Notification.exception('Error 2' + error);\n            }\n        }, 600);\n        set();\n    }\n\n    /**\n     * Create a new row.\n     * @param {Number} index The index.\n     * @return {Promise} The promise.\n     */\n    async createRow(index) {\n        const rowid = await Repository.createRow({courseid: this.courseid, sortorder: index});\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            row.sortorder = index;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async delete(btn) {\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const response = await Repository.deleteRow({rowid: rowid});\n        return new Promise((resolve) => {\n            if (response.success) {\n                const rows = State.getValue('rows');\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('rows', rows);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const rows = State.getValue('rows');\n        rows.forEach((row, index) => {\n            row.sortorder = index;\n        });\n        State.setValue('rows', rows);\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        document.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        document.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n        });\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n\n        this.setTableData();\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const rows = State.getValue('rows');\n        // Find the correct cell in the row.\n        const rowIndex = rows.findIndex(r => r.id == index);\n        const cellIndex = rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n        rows[rowIndex].cells[cellIndex].value = value;\n        this.setTableData();\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async add(btn) {\n        const rows = State.getValue('rows');\n        // Find the rowcount this button is in the table.\n        const tablerows = document.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const index = Array.from(tablerows).indexOf(btn.closest('[data-row]'));\n        const row = await this.createRow(index + 1);\n        rows.splice(index + 1, 0, row);\n        this.resetRowSortorder();\n        State.setValue('rows', rows);\n    }\n\n    /**\n     * Parse response data to a JSON object.\n     * @param {Object} response The response.\n     * @return {Any} The JSON object.\n     */\n    parseResponse(response) {\n        if (typeof response.data !== 'string') {\n            return;\n        }\n        try {\n            const Json = JSON.parse(response.data);\n            return Json;\n        } catch (error) {\n            return;\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {String} courseid The courseid.\n */\nconst init = (courseid) => {\n    new Manager(courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","courseid","parseInt","addEventListeners","getDatagrid","this","getTableConfig","getTableData","response","Repository","getColumns","table","json","parseResponse","State","setValue","exception","error","getData","rows","length","parseRows","row","createRow","resetRowSortorder","columns","getValue","map","cells","cell","column","find","Object","assign","type","edit","getRowObject","cleanRows","rowObject","cleanedRows","cleanedRow","keys","forEach","key","cleanedCell","window","console","log","JSON","stringify","async","setData","set","index","rowid","sortorder","Promise","resolve","id","undefined","structuredClone","value","btn","closest","dataset","deleteRow","success","Array","from","children","indexOf","splice","document","addEventListener","e","target","preventDefault","actions","input","change","action","add","save","stopEdit","delete","setTableData","columnid","rowIndex","findIndex","r","cellIndex","c","tablerows","querySelectorAll","data","parse","init"],"mappings":"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"}