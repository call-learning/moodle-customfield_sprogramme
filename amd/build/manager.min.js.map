{"version":3,"file":"manager.min.js","sources":["../src/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     customfield_sprogramme/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'customfield_sprogramme/local/state';\nimport Repository from 'customfield_sprogramme/local/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport {debounce} from 'core/utils';\nimport './local/components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The courseid.\n     * @type {Number}\n     */\n    courseid;\n\n    /**\n     * The table name.\n     */\n    table = 'customfield_sprogramme';\n\n    /**\n     * Constructor.\n     * @param {String} courseid The courseid.\n     * @return {void}\n     */\n    constructor(courseid) {\n        this.courseid = parseInt(courseid);\n        this.addEventListeners();\n        this.getDatagrid();\n    }\n\n    async getDatagrid() {\n        await this.getTableConfig();\n        await this.getTableData();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        try {\n            const response = await Repository.getColumns({table: this.table});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            const json = this.parseResponse(response);\n            if (json) {\n                await State.setValue('columns', json);\n            } else {\n                Notification.exception('The response is not valid JSON');\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Get the available disciplines.\n     * @return {Array} The disciplines.\n     */\n    getDisciplines() {\n        const disciplines = Repository.getDisciplines();\n        return disciplines;\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({courseid: this.courseid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.rows.length > 0) {\n                const rows = this.parseRows(response.rows);\n                State.setValue('rows', rows);\n            } else {\n                const row = await this.createRow(0);\n                State.setValue('rows', [row]);\n                this.resetRowSortorder();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the rows, add the correct column properties to each cell.\n     * @param {Array} rows The rows.\n     * @return {Array} The parsed rows.\n     */\n    parseRows(rows) {\n        const columns = State.getValue('columns');\n        return rows.map(row => {\n            row.cells = row.cells.map(cell => {\n                const column = columns.find(column => column.column == cell.column);\n                // Clone the column properties to the cell but keep the cell properties.\n                cell = Object.assign({}, cell, column);\n                cell[cell.type] = true;\n                cell.edit = true;\n                return cell;\n            });\n            return row;\n        });\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n                'disciplines': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n            },\n        };\n    }\n\n    /**\n     * Clean the rows object.\n     * @param {Array} rows The rows.\n     * @return {Array} The cleaned rows.\n     */\n    cleanRows(rows) {\n        const rowObject = this.getRowObject();\n        const cleanedRows = rows.map(row => {\n            const cleanedRow = {};\n            Object.keys(rowObject.rows).forEach(key => {\n                cleanedRow[key] = row[key];\n            });\n            // Clean the cells.\n            cleanedRow.cells = row.cells.map(cell => {\n                const cleanedCell = {};\n                Object.keys(rowObject.rows.cells).forEach(key => {\n                    cleanedCell[key] = cell[key];\n                });\n                return cleanedCell;\n            });\n            // Clean the disciplines.\n            cleanedRow.disciplines = row.disciplines.map(discipline => {\n                const cleanedDiscipline = {};\n                Object.keys(rowObject.rows.disciplines).forEach(key => {\n                    cleanedDiscipline[key] = discipline[key];\n                });\n                return cleanedDiscipline;\n            });\n            return cleanedRow;\n        });\n        return cleanedRows;\n    }\n\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            try {\n                const rows = State.getValue('rows');\n                const response = await Repository.setData({courseid: this.courseid, rows: this.cleanRows(rows)});\n                if (!response) {\n                    Notification.exception('No response from the server');\n                }\n            } catch (error) {\n                Notification.exception('Error 2' + error);\n            }\n        }, 600);\n        set();\n    }\n\n    /**\n     * Create a new row.\n     * @param {Number} index The index.\n     * @return {Promise} The promise.\n     */\n    async createRow(index) {\n        const rowid = await Repository.createRow({courseid: this.courseid, sortorder: index});\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            row.sortorder = index;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async delete(btn) {\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const response = await Repository.deleteRow({courseid: this.courseid, rowid: rowid});\n        return new Promise((resolve) => {\n            if (response) {\n                const rows = State.getValue('rows');\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('rows', rows);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const rows = State.getValue('rows');\n        rows.forEach((row, index) => {\n            row.sortorder = index;\n        });\n        State.setValue('rows', rows);\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const app = document.querySelector('.' + this.table);\n        app.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        app.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        app.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n            }\n        });\n        // Disciplines form typeahead, using .disciplineform input[type=\"search\"]\n        // All options are already in the DOM, just show and hide them.\n        // On select return the discipline id and add it in this form to the cell\n        // {id: 1, value: 20}, {id: 2, value: 60}, {id: 7, value: 20}\n        // The value is set to 100 for now, this will be updated later in this code by adding another input field.\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const search = form.querySelector('input[type=\"search\"]');\n        search.addEventListener('input', (e) => {\n            const input = e.target.closest('input');\n            if (input) {\n                this.typeahead(input);\n            }\n        });\n    }\n\n    /**\n     * Typeahead.\n     * Limit to 5 options.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    typeahead(input) {\n        const value = input.value;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const options = form.querySelectorAll('[data-option]');\n        options.forEach(option => {\n            this.removeMatchBold(option);\n            if (option.textContent.toLowerCase().includes(value.toLowerCase())) {\n                option.classList.remove('d-none');\n                this.makeMatchBold(option, value);\n            } else {\n                option.classList.add('d-none');\n            }\n        });\n    }\n\n    /**\n     * Make the match bold.\n     * @param {object} option The option.\n     * @param {string} value The value.\n     * @return {void}\n     */\n    makeMatchBold(option, value) {\n        const text = option.textContent;\n        const index = text.toLowerCase().indexOf(value.toLowerCase());\n        const first = text.slice(0, index);\n        const match = text.slice(index, index + value.length);\n        const last = text.slice(index + value.length);\n        option.innerHTML = first + '<strong>' + match + '</strong>' + last;\n    }\n\n    /**\n     * Remove the match bold.\n     * @param {object} option The option.\n     * @return {void}\n     */\n    removeMatchBold(option) {\n        option.innerHTML = option.textContent;\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'add') {\n            this.add(btn);\n        }\n        if (btn.dataset.action === 'edit') {\n            this.edit(btn);\n        }\n        if (btn.dataset.action === 'save') {\n            this.save();\n            this.stopEdit();\n        }\n        if (btn.dataset.action === 'delete') {\n            this.delete(btn);\n        }\n        if (btn.dataset.action === 'adddisc') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'removedisc') {\n            this.removeDiscipline(btn);\n        }\n        if (btn.dataset.action === 'closedisciplineform') {\n            this.closeDisciplineForm();\n        }\n        if (btn.dataset.action === 'selectdiscipline') {\n            const option = btn.closest('[data-option]');\n            const discipline = {\n                id: option.dataset.id,\n                name: option.textContent,\n            };\n            this.setDisciplineForm(discipline);\n        }\n        if (btn.dataset.action === 'discipline-confirm') {\n            this.addDiscipline();\n        }\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const rows = State.getValue('rows');\n        // Find the correct cell in the row.\n        const rowIndex = rows.findIndex(r => r.id == index);\n        const cellIndex = rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n        rows[rowIndex].cells[cellIndex].value = value;\n        this.setTableData();\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async add(btn) {\n        const rows = State.getValue('rows');\n        // Find the rowcount this button is in the table.\n        const tablerows = document.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const index = Array.from(tablerows).indexOf(btn.closest('[data-row]'));\n        const row = await this.createRow(index + 1);\n        rows.splice(index + 1, 0, row);\n        this.resetRowSortorder();\n        State.setValue('rows', rows);\n    }\n\n    /**\n     * Add a discipline to the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async showDisciplineForm(btn) {\n        const row = btn.closest('[data-row]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        form.querySelector('#rowid').value = row.dataset.index;\n        const arrow = form.querySelector('.formarrow');\n\n\n        // Get the row index nr based on the row position in the table.\n        const rows = document.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const rowArray = Array.from(rows);\n        const index = rowArray.indexOf(row);\n        // Set the title of the form to show the row number.\n        form.querySelector('[data-region=\"rownumber\"]').textContent =\n            await getString('row', 'customfield_sprogramme', index + 1);\n\n        // Attache the form to the first row for the first 8 rows.\n        // Then attach it to 8 rows before the clicked row.\n        // This makes sure the form is always visible.\n        const setindex = index - 8;\n        let attachTo;\n        let attachToButton;\n        if (setindex > 0) {\n            attachTo = rowArray[setindex].querySelector('[data-disciplines]');\n            attachToButton = rowArray[setindex].querySelector('[data-action=\"adddisc\"]');\n        } else {\n            attachTo = rowArray[0].querySelector('[data-disciplines]');\n            attachToButton = rowArray[0].querySelector('[data-action=\"adddisc\"]');\n        }\n        attachTo.appendChild(form);\n\n        // Position the form arrow next to the button that was clicked.\n        const rectBtn = btn.getBoundingClientRect();\n        const rectAttachToButton = attachToButton.getBoundingClientRect();\n        arrow.style.top = rectBtn.top - rectAttachToButton.top + 'px';\n        this.renderFormDisciplines(row.dataset.index);\n    }\n\n    /**\n     * Remove the discipline form.\n     * @return {void}\n     */\n    closeDisciplineForm() {\n        const container = document.querySelector('[data-region=\"disciplineform-container\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        container.appendChild(form);\n    }\n\n    /**\n     * Select a discipline.\n     * @param {object} discipline The discipline.\n     * @return {void}\n     */\n    async setDisciplineForm(discipline) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const formFieldSearch = form.querySelector('input[type=\"search\"]');\n        const formFieldValue = form.querySelector('#discipline-value');\n        const formFieldDiscipline = form.querySelector('#discipline-id');\n        const formFieldDisciplineName = form.querySelector('#discipline-name');\n        const formFieldLastIds = form.querySelector('#lastids');\n\n        formFieldDiscipline.value = discipline.id;\n        formFieldDisciplineName.value = discipline.name;\n        formFieldSearch.value = discipline.name;\n\n        // Add the discipline id to the formFieldLastIds.\n        const lastIds = formFieldLastIds.value.split(',');\n        if (!lastIds.includes(discipline.id)) {\n            lastIds.push(discipline.id);\n            formFieldLastIds.value = lastIds.join(',');\n        }\n        formFieldValue.focus();\n    }\n\n    // Add a discipline to the row.\n    async addDiscipline() {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = form.querySelector('#discipline-id').value;\n        const disciplinevalue = form.querySelector('#discipline-value').value;\n        const disciplinename = form.querySelector('#discipline-name').value;\n        const discipline = {\n            id: disciplineid,\n            name: disciplinename,\n            percentage: disciplinevalue,\n        };\n        const rows = State.getValue('rows');\n        const row = rows.find(r => r.id == rowid);\n        // Update or add the discipline to the row.\n        const disciplineIndex = row.disciplines.findIndex(d => d.id == discipline.id);\n        const container = document.querySelector(\n            '[data-disciplines][data-rowid=\"' + rowid + '\"] [data-region=\"container-disciplines\"]');\n        const selectedcontainer = form.querySelector('[data-region=\"selected-disciplines\"]');\n        if (disciplineIndex > -1) {\n            row.disciplines[disciplineIndex] = discipline;\n            const rendered = container.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const selected = selectedcontainer.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.replaceNode(rendered, html, js);\n            await Templates.replaceNode(selected, html, js);\n\n        } else {\n            row.disciplines.push(discipline);\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.appendNodeContents(container, html, js);\n            await Templates.appendNodeContents(selectedcontainer, html, js);\n        }\n        this.setTableData();\n    }\n\n    /**\n     * Render the disciplines in the form.\n     * @param {int} rowid The rowid.\n     * @return {void}\n     */\n    async renderFormDisciplines(rowid) {\n        const rows = State.getValue('rows');\n        const row = rows.find(r => r.id == rowid);\n        const disciplines = row.disciplines;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const container = form.querySelector('[data-region=\"selected-disciplines\"]');\n        container.innerHTML = '';\n        disciplines.forEach(async(discipline) => {\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            Templates.appendNodeContents(container, html, js);\n        });\n    }\n\n    /**\n     * Remove a discipline from the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async removeDiscipline(btn) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = btn.closest('[data-id]').dataset.id;\n        const rows = State.getValue('rows');\n        const row = rows.find(r => r.id == rowid);\n        const index = row.disciplines.findIndex(d => d.id == disciplineid);\n        row.disciplines.splice(index, 1);\n        const container = document.querySelector(\n            '[data-disciplines][data-rowid=\"' + rowid + '\"] [data-region=\"container-disciplines\"]');\n        const selectedcontainer = document.querySelector('[data-region=\"selected-disciplines\"]');\n        const discipline = container.querySelector('[data-id=\"' + disciplineid + '\"]');\n        const selected = selectedcontainer.querySelector('[data-id=\"' + disciplineid + '\"]');\n        container.removeChild(discipline);\n        selectedcontainer.removeChild(selected);\n        this.setTableData();\n    }\n\n    /**\n     * Parse response data to a JSON object.\n     * @param {Object} response The response.\n     * @return {Any} The JSON object.\n     */\n    parseResponse(response) {\n        if (typeof response.data !== 'string') {\n            return;\n        }\n        try {\n            const Json = JSON.parse(response.data);\n            Json.forEach(column => {\n                column[column.type] = true;\n            });\n            return Json;\n        } catch (error) {\n            return;\n        }\n    }\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"]`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"]`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {String} courseid The courseid.\n */\nconst init = (courseid) => {\n    new Manager(courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","courseid","parseInt","addEventListeners","getDatagrid","this","getTableConfig","getTableData","response","Repository","getColumns","table","json","parseResponse","State","setValue","exception","error","getDisciplines","getData","rows","length","parseRows","row","createRow","resetRowSortorder","columns","getValue","map","cells","cell","column","find","Object","assign","type","edit","getRowObject","cleanRows","rowObject","cleanedRow","keys","forEach","key","cleanedCell","disciplines","discipline","cleanedDiscipline","async","setData","set","index","rowid","sortorder","Promise","resolve","id","undefined","structuredClone","value","btn","closest","dataset","deleteRow","Array","from","children","indexOf","splice","app","document","querySelector","addEventListener","e","target","preventDefault","actions","input","change","navigate","typeahead","querySelectorAll","option","removeMatchBold","textContent","toLowerCase","includes","classList","remove","makeMatchBold","add","text","first","slice","match","last","innerHTML","action","save","stopEdit","delete","showDisciplineForm","removeDiscipline","closeDisciplineForm","name","setDisciplineForm","addDiscipline","columnid","rowIndex","findIndex","r","cellIndex","c","setTableData","tablerows","form","arrow","rowArray","setindex","attachTo","attachToButton","appendChild","rectBtn","getBoundingClientRect","rectAttachToButton","style","top","renderFormDisciplines","container","formFieldSearch","formFieldValue","formFieldDiscipline","formFieldDisciplineName","formFieldLastIds","lastIds","split","push","join","focus","disciplineid","disciplinevalue","percentage","disciplineIndex","d","selectedcontainer","rendered","selected","html","js","Templates","renderForPromise","replaceNode","appendNodeContents","removeChild","data","Json","JSON","parse","currentIndex","currentColumn","allRows","i","nextInput","previousInput","nextColumn","nextElementSibling","previousColumn","previousElementSibling","init"],"mappings":"kzBAmCMA,QAuBFC,YAAYC,2CAlBA,wEAWJ,+BAQCA,SAAWC,SAASD,eACpBE,yBACAC,wCAICC,KAAKC,uBACLD,KAAKE,gDASDC,eAAiBC,oBAAWC,WAAW,CAACC,MAAON,KAAKM,QAEpDC,KAAOP,KAAKQ,cAAcL,UAC5BI,WACME,eAAMC,SAAS,UAAWH,4BAEnBI,UAAU,kCAE7B,MAAOC,6BACQD,UAAUC,QAQ/BC,wBACwBT,oBAAWS,gDAUrBV,eAAiBC,oBAAWU,QAAQ,CAAClB,SAAUI,KAAKJ,cAEtDO,SAASY,KAAKC,OAAS,EAAG,OACpBD,KAAOf,KAAKiB,UAAUd,SAASY,qBAC/BL,SAAS,OAAQK,UACpB,OACGG,UAAYlB,KAAKmB,UAAU,kBAC3BT,SAAS,OAAQ,CAACQ,WACnBE,qBAEX,MAAOR,6BACQD,UAAUC,QAS/BK,UAAUF,YACAM,QAAUZ,eAAMa,SAAS,kBACxBP,KAAKQ,KAAIL,MACZA,IAAIM,MAAQN,IAAIM,MAAMD,KAAIE,aAChBC,OAASL,QAAQM,MAAKD,QAAUA,OAAOA,QAAUD,KAAKC,gBAE5DD,KAAOG,OAAOC,OAAO,GAAIJ,KAAMC,SAC1BD,KAAKK,OAAQ,EAClBL,KAAKM,MAAO,EACLN,QAEJP,OAQfc,qBACW,MACK,IACE,eACO,kBACJ,MACG,cACE,eACD,qBAEE,IACL,UACE,kBACM,gBAW9BC,UAAUlB,YACAmB,UAAYlC,KAAKgC,sBACHjB,KAAKQ,KAAIL,YACnBiB,WAAa,UACnBP,OAAOQ,KAAKF,UAAUnB,MAAMsB,SAAQC,MAChCH,WAAWG,KAAOpB,IAAIoB,QAG1BH,WAAWX,MAAQN,IAAIM,MAAMD,KAAIE,aACvBc,YAAc,UACpBX,OAAOQ,KAAKF,UAAUnB,KAAKS,OAAOa,SAAQC,MACtCC,YAAYD,KAAOb,KAAKa,QAErBC,eAGXJ,WAAWK,YAActB,IAAIsB,YAAYjB,KAAIkB,mBACnCC,kBAAoB,UAC1Bd,OAAOQ,KAAKF,UAAUnB,KAAKyB,aAAaH,SAAQC,MAC5CI,kBAAkBJ,KAAOG,WAAWH,QAEjCI,qBAEJP,oCAWC,oBAASQ,oBAEP5B,KAAON,eAAMa,SAAS,cACLlB,oBAAWwC,QAAQ,CAAChD,SAAUI,KAAKJ,SAAUmB,KAAMf,KAAKiC,UAAUlB,+BAExEJ,UAAU,+BAE7B,MAAOC,6BACQD,UAAU,UAAYC,UAExC,IACHiC,mBAQYC,aACNC,YAAc3C,oBAAWe,UAAU,CAACvB,SAAUI,KAAKJ,SAAUoD,UAAWF,eACvE,IAAIG,SAASC,gBACVhC,IAAM,GACZA,IAAIiC,GAAKJ,MACT7B,IAAI8B,UAAYF,YACVzB,QAAUZ,eAAMa,SAAS,gBACf8B,IAAZ/B,SAKJH,IAAIM,MAAQH,QAAQE,KAAIG,QAAU2B,gBAAgB3B,UAElDR,IAAIM,MAAMa,SAAQZ,OACdA,KAAKM,MAAO,EACZN,KAAK6B,MAAQ,GACb7B,KAAKA,KAAKK,OAAQ,KAEtBoB,QAAQhC,MAXJgC,0BAoBCK,WACHR,MAAQQ,IAAIC,QAAQ,cAAcC,QAAQX,MAC1C3C,eAAiBC,oBAAWsD,UAAU,CAAC9D,SAAUI,KAAKJ,SAAUmD,MAAOA,eACtE,IAAIE,SAASC,aACZ/C,SAAU,OACJY,KAAON,eAAMa,SAAS,QACtBwB,MAAQa,MAAMC,KAAKL,IAAIC,QAAQ,wBAAwBK,UAAUC,QAAQP,IAAIC,QAAQ,eAC3FzC,KAAKgD,OAAOjB,MAAO,QACd1B,mCACCV,SAAS,OAAQK,MAE3BmC,QAAQH,UAQhB3B,0BACUL,KAAON,eAAMa,SAAS,QAC5BP,KAAKsB,SAAQ,CAACnB,IAAK4B,SACf5B,IAAI8B,UAAYF,wBAEdpC,SAAS,OAAQK,MAO3BjB,0BACUkE,IAAMC,SAASC,cAAc,IAAMlE,KAAKM,OAC9C0D,IAAIG,iBAAiB,SAAUC,QACvBb,IAAMa,EAAEC,OAAOb,QAAQ,iBACvBD,MACAa,EAAEE,sBACGC,QAAQhB,SAIrBS,IAAIG,iBAAiB,UAAWC,UACtBI,MAAQJ,EAAEC,OAAOb,QAAQ,gBAC3BgB,YACKC,OAAOD,UAIpBR,IAAIG,iBAAiB,WAAYC,IACf,cAAVA,EAAE9B,KAAiC,YAAV8B,EAAE9B,UACtBoC,SAASN,MAQTH,SAASC,cAAc,kCAChBA,cAAc,wBAC3BC,iBAAiB,SAAUC,UACxBI,MAAQJ,EAAEC,OAAOb,QAAQ,SAC3BgB,YACKG,UAAUH,UAW3BG,UAAUH,aACAlB,MAAQkB,MAAMlB,MACPW,SAASC,cAAc,kCACfU,iBAAiB,iBAC9BvC,SAAQwC,cACPC,gBAAgBD,QACjBA,OAAOE,YAAYC,cAAcC,SAAS3B,MAAM0B,gBAChDH,OAAOK,UAAUC,OAAO,eACnBC,cAAcP,OAAQvB,QAE3BuB,OAAOK,UAAUG,IAAI,aAWjCD,cAAcP,OAAQvB,aACZgC,KAAOT,OAAOE,YACdjC,MAAQwC,KAAKN,cAAclB,QAAQR,MAAM0B,eACzCO,MAAQD,KAAKE,MAAM,EAAG1C,OACtB2C,MAAQH,KAAKE,MAAM1C,MAAOA,MAAQQ,MAAMtC,QACxC0E,KAAOJ,KAAKE,MAAM1C,MAAQQ,MAAMtC,QACtC6D,OAAOc,UAAYJ,MAAQ,WAAaE,MAAQ,YAAcC,KAQlEZ,gBAAgBD,QACZA,OAAOc,UAAYd,OAAOE,YAO9BR,QAAQhB,QACuB,QAAvBA,IAAIE,QAAQmC,aACPP,IAAI9B,KAEc,SAAvBA,IAAIE,QAAQmC,aACP7D,KAAKwB,KAEa,SAAvBA,IAAIE,QAAQmC,cACPC,YACAC,YAEkB,WAAvBvC,IAAIE,QAAQmC,aACPG,OAAOxC,KAEW,YAAvBA,IAAIE,QAAQmC,aACPI,mBAAmBzC,KAED,eAAvBA,IAAIE,QAAQmC,aACPK,iBAAiB1C,KAEC,wBAAvBA,IAAIE,QAAQmC,aACPM,sBAEkB,qBAAvB3C,IAAIE,QAAQmC,OAA+B,OACrCf,OAAStB,IAAIC,QAAQ,iBACrBf,WAAa,CACfU,GAAI0B,OAAOpB,QAAQN,GACnBgD,KAAMtB,OAAOE,kBAEZqB,kBAAkB3D,YAEA,uBAAvBc,IAAIE,QAAQmC,aACPS,gBAQb5B,OAAOD,aACGtD,IAAMsD,MAAMhB,QAAQ,cACpB/B,KAAO+C,MAAMhB,QAAQ,eACrBF,MAAQkB,MAAMlB,MACdgD,SAAW7E,KAAKgC,QAAQ6C,SACxBxD,MAAQ5B,IAAIuC,QAAQX,MACpB/B,KAAON,eAAMa,SAAS,QAEtBiF,SAAWxF,KAAKyF,WAAUC,GAAKA,EAAEtD,IAAML,QACvC4D,UAAY3F,KAAKwF,UAAU/E,MAAMgF,WAAUG,GAAKA,EAAEL,UAAYA,WACpEvF,KAAKwF,UAAU/E,MAAMkF,WAAWpD,MAAQA,WACnCsD,yBAOCrD,WACAxC,KAAON,eAAMa,SAAS,QAEtBuF,UAAY5C,SAASW,iBAAiB,mCACtC9B,MAAQa,MAAMC,KAAKiD,WAAW/C,QAAQP,IAAIC,QAAQ,eAClDtC,UAAYlB,KAAKmB,UAAU2B,MAAQ,GACzC/B,KAAKgD,OAAOjB,MAAQ,EAAG,EAAG5B,UACrBE,mCACCV,SAAS,OAAQK,+BAQFwC,WACfrC,IAAMqC,IAAIC,QAAQ,cAClBsD,KAAO7C,SAASC,cAAc,kCACpC4C,KAAK5C,cAAc,UAAUZ,MAAQpC,IAAIuC,QAAQX,YAC3CiE,MAAQD,KAAK5C,cAAc,cAI3BnD,KAAOkD,SAASW,iBAAiB,mCACjCoC,SAAWrD,MAAMC,KAAK7C,MACtB+B,MAAQkE,SAASlD,QAAQ5C,KAE/B4F,KAAK5C,cAAc,6BAA6Ba,kBACtC,kBAAU,MAAO,yBAA0BjC,MAAQ,SAKvDmE,SAAWnE,MAAQ,MACrBoE,SACAC,eACAF,SAAW,GACXC,SAAWF,SAASC,UAAU/C,cAAc,sBAC5CiD,eAAiBH,SAASC,UAAU/C,cAAc,6BAElDgD,SAAWF,SAAS,GAAG9C,cAAc,sBACrCiD,eAAiBH,SAAS,GAAG9C,cAAc,4BAE/CgD,SAASE,YAAYN,YAGfO,QAAU9D,IAAI+D,wBACdC,mBAAqBJ,eAAeG,wBAC1CP,MAAMS,MAAMC,IAAMJ,QAAQI,IAAMF,mBAAmBE,IAAM,UACpDC,sBAAsBxG,IAAIuC,QAAQX,OAO3CoD,4BACUyB,UAAY1D,SAASC,cAAc,4CACnC4C,KAAO7C,SAASC,cAAc,kCACpCyD,UAAUP,YAAYN,8BAQFrE,kBACdqE,KAAO7C,SAASC,cAAc,kCAC9B0D,gBAAkBd,KAAK5C,cAAc,wBACrC2D,eAAiBf,KAAK5C,cAAc,qBACpC4D,oBAAsBhB,KAAK5C,cAAc,kBACzC6D,wBAA0BjB,KAAK5C,cAAc,oBAC7C8D,iBAAmBlB,KAAK5C,cAAc,YAE5C4D,oBAAoBxE,MAAQb,WAAWU,GACvC4E,wBAAwBzE,MAAQb,WAAW0D,KAC3CyB,gBAAgBtE,MAAQb,WAAW0D,WAG7B8B,QAAUD,iBAAiB1E,MAAM4E,MAAM,KACxCD,QAAQhD,SAASxC,WAAWU,MAC7B8E,QAAQE,KAAK1F,WAAWU,IACxB6E,iBAAiB1E,MAAQ2E,QAAQG,KAAK,MAE1CP,eAAeQ,oCAKTvB,KAAO7C,SAASC,cAAc,kCAC9BnB,MAAQ+D,KAAK5C,cAAc,UAAUZ,MACrCgF,aAAexB,KAAK5C,cAAc,kBAAkBZ,MACpDiF,gBAAkBzB,KAAK5C,cAAc,qBAAqBZ,MAE1Db,WAAa,CACfU,GAAImF,aACJnC,KAHmBW,KAAK5C,cAAc,oBAAoBZ,MAI1DkF,WAAYD,iBAGVrH,IADOT,eAAMa,SAAS,QACXK,MAAK8E,GAAKA,EAAEtD,IAAMJ,QAE7B0F,gBAAkBvH,IAAIsB,YAAYgE,WAAUkC,GAAKA,EAAEvF,IAAMV,WAAWU,KACpEwE,UAAY1D,SAASC,cACvB,kCAAoCnB,MAAQ,4CAC1C4F,kBAAoB7B,KAAK5C,cAAc,2CACzCuE,iBAAmB,EAAG,CACtBvH,IAAIsB,YAAYiG,iBAAmBhG,iBAC7BmG,SAAWjB,UAAUzD,cAAc,aAAezB,WAAWU,GAAK,MAClE0F,SAAWF,kBAAkBzE,cAAc,aAAezB,WAAWU,GAAK,OAC1E2F,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2CxG,kBACzFuG,mBAAUE,YAAYN,SAAUE,KAAMC,UACtCC,mBAAUE,YAAYL,SAAUC,KAAMC,QAEzC,CACH7H,IAAIsB,YAAY2F,KAAK1F,kBACfqG,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2CxG,kBACzFuG,mBAAUG,mBAAmBxB,UAAWmB,KAAMC,UAC9CC,mBAAUG,mBAAmBR,kBAAmBG,KAAMC,SAE3DnC,2CAQmB7D,aAGlBP,YAFO/B,eAAMa,SAAS,QACXK,MAAK8E,GAAKA,EAAEtD,IAAMJ,QACXP,YAElBmF,UADO1D,SAASC,cAAc,kCACbA,cAAc,wCACrCyD,UAAUhC,UAAY,GACtBnD,YAAYH,SAAQM,MAAAA,mBACVmG,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2CxG,+BACrF0G,mBAAmBxB,UAAWmB,KAAMC,8BAS/BxF,WAEbR,MADOkB,SAASC,cAAc,kCACjBA,cAAc,UAAUZ,MACrCgF,aAAe/E,IAAIC,QAAQ,aAAaC,QAAQN,GAEhDjC,IADOT,eAAMa,SAAS,QACXK,MAAK8E,GAAKA,EAAEtD,IAAMJ,QAC7BD,MAAQ5B,IAAIsB,YAAYgE,WAAUkC,GAAKA,EAAEvF,IAAMmF,eACrDpH,IAAIsB,YAAYuB,OAAOjB,MAAO,SACxB6E,UAAY1D,SAASC,cACvB,kCAAoCnB,MAAQ,4CAC1C4F,kBAAoB1E,SAASC,cAAc,wCAC3CzB,WAAakF,UAAUzD,cAAc,aAAeoE,aAAe,MACnEO,SAAWF,kBAAkBzE,cAAc,aAAeoE,aAAe,MAC/EX,UAAUyB,YAAY3G,YACtBkG,kBAAkBS,YAAYP,eACzBjC,eAQTpG,cAAcL,aACmB,iBAAlBA,SAASkJ,eAIVC,KAAOC,KAAKC,MAAMrJ,SAASkJ,aACjCC,KAAKjH,SAAQX,SACTA,OAAOA,OAAOI,OAAQ,KAEnBwH,KACT,MAAO1I,eAUb8D,SAASN,SACCqF,aAAerF,EAAEC,OAAOb,QAAQ,cAAcC,QAAQX,MACtD4G,cAAgBtF,EAAEC,OAAOb,QAAQ,eAAeC,QAAQ6C,SACxDqD,QAAU1F,SAASW,iBAAiB,kBACrC,IAAIgF,EAAI,EAAGA,EAAID,QAAQ3I,OAAQ4I,OAC5BD,QAAQC,GAAGnG,QAAQX,OAAS2G,aAAc,IAC5B,cAAVrF,EAAE9B,KAAuBsH,EAAID,QAAQ3I,OAAS,EAAG,OAC3C6I,UAAYF,QAAQC,EAAI,GAAG1F,wCAAiCwF,qBAC9DG,WACAA,UAAUxB,WAGJ,YAAVjE,EAAE9B,KAAqBsH,EAAI,EAAG,OACxBE,cAAgBH,QAAQC,EAAI,GAAG1F,wCAAiCwF,qBAClEI,eACAA,cAAczB,YAMhB,eAAVjE,EAAE9B,IAAsB,OAClByH,WAAa3F,EAAEC,OAAOb,QAAQ,eAAewG,mBAC/CD,YACAA,WAAW1B,WAGL,cAAVjE,EAAE9B,IAAqB,OACjB2H,eAAiB7F,EAAEC,OAAOb,QAAQ,eAAe0G,uBACnDD,gBACAA,eAAe5B,uBAchB,CACX8B,KALUvK,eACNF,QAAQE"}