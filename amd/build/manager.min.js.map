{"version":3,"file":"manager.min.js","sources":["../src/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     customfield_sprogramme/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'customfield_sprogramme/local/state';\nimport Repository from 'customfield_sprogramme/local/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport {debounce} from 'core/utils';\nimport './local/components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The courseid.\n     * @type {Number}\n     */\n    courseid;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * The table name.\n     */\n    table = 'customfield_sprogramme';\n\n    /**\n     * The table columns.\n     * @type {Array}\n     */\n    columns = [];\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} courseid The courseid.\n     * @return {void}\n     */\n    constructor(element, courseid) {\n        this.element = element;\n        this.courseid = parseInt(courseid);\n        this.addEventListeners();\n        this.getDatagrid();\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const form = document.querySelector('[data-region=\"app\"]');\n        form.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        form.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n            const modulename = e.target.closest('[data-region=\"modulename\"]');\n            if (modulename) {\n                this.changeModule(modulename);\n            }\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        form.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n                e.preventDefault();\n            }\n            if (e.key === 'Enter') {\n                e.preventDefault();\n            }\n        });\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n        });\n\n        let dragging = null;\n\n        form.addEventListener('dragstart', (e) => {\n            if (e.target.tagName === 'TR') {\n                dragging = e.target;\n                e.target.effectAllowed = 'move';\n            }\n        });\n        form.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('tr');\n            if (target && target !== dragging && target.parentNode.dataset.region === 'rows') {\n                const rect = target.getBoundingClientRect();\n                if (e.clientY - rect.top > rect.height / 2) {\n                    target.parentNode.insertBefore(dragging, target.nextSibling);\n                } else {\n                    target.parentNode.insertBefore(dragging, target);\n                }\n            }\n        });\n        form.addEventListener(\"drop\", (e) => {\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        form.addEventListener('dragend', (e) => {\n            const rowId = dragging.dataset.index;\n            const prevRowId = dragging.previousElementSibling ? dragging.previousElementSibling.dataset.index : 0;\n            const moduleId = dragging.closest('[data-region=\"module\"]').dataset.id;\n            Repository.updateSortOrder(\n                {\n                    type: 'row',\n                    courseid: this.courseid,\n                    moduleid: moduleId,\n                    id: rowId,\n                    previd: prevRowId\n                }\n            );\n            dragging = null;\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        // Disciplines form typeahead, using .disciplineform input[type=\"search\"]\n        // All options are already in the DOM, just show and hide them.\n        // On select return the discipline id and add it in this form to the cell\n        // {id: 1, value: 20}, {id: 2, value: 60}, {id: 7, value: 20}\n        // The value is set to 100 for now, this will be updated later in this code by adding another input field.\n        const disciplineForm = document.querySelector('[data-region=\"disciplineform\"]');\n        const search = disciplineForm.querySelector('input[type=\"search\"]');\n        search.addEventListener('input', (e) => {\n            const input = e.target.closest('input');\n            if (input) {\n                this.typeahead(input);\n            }\n        });\n\n        // Listen for the saveconfirm custom event. When run save the table data.\n        document.addEventListener('saveconfirm', () => {\n            this.setTableData();\n        });\n    }\n\n    async getDatagrid() {\n        await this.getTableData();\n        await this.getTableConfig();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        const response = await Repository.getColumns({courseid: this.courseid});\n        await State.setValue('columns', response.columns);\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({courseid: this.courseid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.modules.length > 0) {\n                const modules = this.parseModules(response.modules);\n                State.setValue('modules', modules);\n            } else {\n                const moduleid = await this.createModule('Module 1', 0);\n                await this.createRow(moduleid, 0, 0);\n                this.getTableData();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the modules, add the correct column properties to each cell.\n     * @param {Array} modules The modules.\n     * @return {Array} The parsed rows.\n     */\n    parseModules(modules) {\n        modules.forEach(mod => {\n            mod.rows.map(row => {\n                row.cells = row.cells.map(cell => {\n                    const column = mod.columns.find(column => column.column == cell.column);\n                    // Clone the column properties to the cell but keep the cell properties.\n                    cell = Object.assign({}, cell, column);\n                    if (cell.type === 'select') {\n                        // Clone the options array to avoid shared references\n                        cell.options = cell.options.map(option => {\n                            const clonedOption = Object.assign({}, option);\n                            if (clonedOption.name == cell.value) {\n                                clonedOption.selected = true;\n                            }\n                            return clonedOption;\n                        });\n                    }\n                    cell.edit = true;\n                    return cell;\n                });\n                return row;\n            });\n        });\n        return modules;\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n                'disciplines': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n                'competencies': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n            },\n        };\n    }\n\n    /**\n     * Check the cell value. It can not exceed the cell length.\n     * @param {object} cell The cell.\n     * @return {void}\n     */\n    checkCellValue(cell) {\n        if (cell.value === null) {\n            return;\n        }\n        if (cell.type === 'text' && cell.value.length > cell.length) {\n            cell.value = cell.value.substring(0, cell.length);\n        }\n    }\n\n\n    /**\n     * Clean the Modules array.\n     * @param {Array} modules The modules.\n     * @return {Array} The cleaned modules.\n     */\n    cleanModules(modules) {\n        const cleanedModules = [];\n        modules.forEach(module => {\n            const rows = module.rows;\n            const rowObject = this.getRowObject();\n            const cleanedRows = rows.map(row => {\n                const cleanedRow = {};\n                Object.keys(rowObject.rows).forEach(key => {\n                    cleanedRow[key] = row[key];\n                });\n                // Clean the cells.\n                cleanedRow.cells = row.cells.map(cell => {\n                    const cleanedCell = {};\n                    this.checkCellValue(cell);\n                    Object.keys(rowObject.rows.cells).forEach(key => {\n                        cleanedCell[key] = cell[key];\n                    });\n                    return cleanedCell;\n                });\n                // Clean the disciplines.\n                cleanedRow.disciplines = row.disciplines.map(discipline => {\n                    const cleanedDiscipline = {};\n                    Object.keys(rowObject.rows.disciplines).forEach(key => {\n                        cleanedDiscipline[key] = discipline[key];\n                    });\n                    return cleanedDiscipline;\n                });\n                // Clean the competencies.\n                cleanedRow.competencies = row.competencies.map(competency => {\n                    const cleanedCompetency = {};\n                    Object.keys(rowObject.rows.competencies).forEach(key => {\n                        cleanedCompetency[key] = competency[key];\n                    });\n                    return cleanedCompetency;\n                });\n                return cleanedRow;\n            });\n            const cleanedModule = {};\n            cleanedModule.id = module.moduleid;\n            cleanedModule.sortorder = module.modulesortorder;\n            cleanedModule.name = module.modulename;\n            cleanedModule.rows = cleanedRows;\n            cleanedModules.push(cleanedModule);\n        });\n        return cleanedModules;\n    }\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            const saveConfirmButton = document.querySelector('[data-action=\"saveconfirm\"]');\n            saveConfirmButton.classList.add('saving');\n            const modules = State.getValue('modules');\n            const cleanedModules = this.cleanModules(modules);\n            const response = await Repository.setData({courseid: this.courseid, modules: cleanedModules});\n            if (!response) {\n                Notification.exception('No response from the server');\n            }\n            setTimeout(() => {\n                saveConfirmButton.classList.remove('saving');\n            }, 200);\n        }, 600);\n        set();\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'addrow') {\n            this.addRow(btn);\n        }\n        if (btn.dataset.action === 'deleterow') {\n            this.deleteRow(btn);\n        }\n        if (btn.dataset.action === 'addmodule') {\n            this.addModule(btn);\n        }\n        if (btn.dataset.action === 'deletemodule') {\n            this.deleteModule(btn);\n        }\n        if (btn.dataset.action === 'adddisc') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'addcomp') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'removedisc') {\n            this.removeDiscipline(btn);\n        }\n        if (btn.dataset.action === 'closedisciplineform') {\n            this.closeDisciplineForm();\n        }\n        if (btn.dataset.action === 'selectdiscipline') {\n            const option = btn.closest('[data-option]');\n            const discipline = {\n                id: option.dataset.id,\n                name: option.textContent,\n            };\n            this.setDisciplineForm(discipline);\n        }\n        if (btn.dataset.action === 'discipline-confirm') {\n            this.addDiscipline();\n        }\n        if (btn.dataset.action === 'saveconfirm') {\n            this.setTableData();\n        }\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async addRow(btn) {\n        const modules = State.getValue('modules');\n\n        let rowid = btn.dataset.id;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const rows = module.rows;\n        // When called from the link under the table, the rowid is not set.\n        if (rowid == -1) {\n            rowid = rows[rows.length - 1].id;\n        }\n\n        const row = await this.createRow(moduleid, rowid);\n        if (!row) {\n            return;\n        }\n        // Inject the row after the clicked row.\n        rows.splice(rows.indexOf(rows.find(r => r.id == rowid)) + 1, 0, row);\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Create a new row.\n     *\n     * @param {Number} moduleid The moduleid.\n     * @param {Number} prevrowid The previous rowid.\n     * @return {Promise} The promise.\n     */\n    async createRow(moduleid, prevrowid) {\n        const rowid = await Repository.createRow({courseid: this.courseid, moduleid: moduleid, prevrowid: prevrowid});\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            row.disciplines = [];\n            row.competencies = [];\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async deleteRow(btn) {\n        const modules = State.getValue('modules');\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteRow({courseid: this.courseid, rowid: rowid});\n        return new Promise((resolve) => {\n            if (response) {\n                const rows = module.rows;\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('modules', modules);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            // Find the correct cell in the row.\n            const rowIndex = module.rows.findIndex(r => r.id == index);\n            if (rowIndex === -1) {\n                return;\n            }\n            const cellIndex = module.rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n            module.rows[rowIndex].cells[cellIndex].value = value;\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Change the module name.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    changeModule(input) {\n        const module = input.closest('[data-region=\"module\"]');\n        const moduleid = module.dataset.id;\n        const name = input.value;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            if (module.moduleid == moduleid) {\n                module.modulename = name;\n            }\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Delete a module.\n     * @param {object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     * @return {void}\n     */\n    async deleteModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteModule({courseid: this.courseid, moduleid: moduleid});\n        return new Promise((resolve) => {\n            if (response) {\n                const index = modules.indexOf(module);\n                modules.splice(index, 1);\n                State.setValue('modules', modules);\n            }\n            resolve(moduleid);\n        });\n    }\n\n    /**\n     * Create a new module.\n     * @param {String} name The name.\n     * @param {Number} index The index.\n     * @return {Promise} The promise.\n     */\n    async createModule(name, index) {\n        const id = await Repository.createModule({name: name, courseid: this.courseid, sortorder: index});\n        return new Promise((resolve) => {\n            resolve(id);\n        });\n    }\n\n    /**\n     * Add a new module.\n     * @return {void}\n     */\n    async addModule() {\n        const modules = State.getValue('modules');\n        const moduleid = await this.createModule(' ', 0);\n        const row = await this.createRow(moduleid, 0);\n        const module = {\n            moduleid: moduleid,\n            modulename: ' ',\n            rows: [row],\n        };\n        modules.push(module);\n        this.resetRowSortorder();\n        State.setValue('modules', modules);\n        this.setTableData();\n    }\n\n    /**\n     * Get the row from the state.\n     * @param {int} rowid The rowid.\n     */\n    getRow(rowid) {\n        const modules = State.getValue('modules');\n        // Combine all rows in one array.\n        const rows = modules.reduce((acc, module) => {\n            return acc.concat(module.rows);\n        }, []);\n        const row = rows.find(r => r.id == rowid);\n        return row;\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const modules = State.getValue('modules');\n        modules.forEach((module, mindex) => {\n            module.modulesortorder = mindex;\n            module.rows.forEach((row, index) => {\n                row.sortorder = index;\n            });\n        });\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Typeahead.\n     * Limit to 5 options.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    typeahead(input) {\n        const value = input.value;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const options = form.querySelectorAll('[data-option]');\n        options.forEach(option => {\n            this.removeMatchBold(option);\n            if (option.textContent.toLowerCase().includes(value.toLowerCase())) {\n                option.classList.remove('d-none');\n                this.makeMatchBold(option, value);\n            } else {\n                option.classList.add('d-none');\n            }\n        });\n    }\n\n    /**\n     * Make the match bold.\n     * @param {object} option The option.\n     * @param {string} value The value.\n     * @return {void}\n     */\n    makeMatchBold(option, value) {\n        const text = option.textContent;\n        const index = text.toLowerCase().indexOf(value.toLowerCase());\n        const first = text.slice(0, index);\n        const match = text.slice(index, index + value.length);\n        const last = text.slice(index + value.length);\n        option.innerHTML = first + '<strong>' + match + '</strong>' + last;\n    }\n\n    /**\n     * Remove the match bold.\n     * @param {object} option The option.\n     * @return {void}\n     */\n    removeMatchBold(option) {\n        option.innerHTML = option.textContent;\n    }\n\n    /**\n     * Add a discipline to the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async showDisciplineForm(btn) {\n        const btnAction = btn.dataset.action;\n        const region = btnAction === 'adddisc' ? 'data-disciplines' : 'data-competencies';\n        const row = btn.closest('[data-row]');\n        const module = btn.closest('[data-region=\"module\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        form.classList.remove('data-disciplines', 'data-competencies');\n        form.classList.add(region);\n        form.querySelector('#rowid').value = row.dataset.index;\n        const arrow = form.querySelector('.formarrow');\n\n        // Get the row index nr based on the row position in the table.\n        const rows = module.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const rowArray = Array.from(rows);\n        const index = rowArray.indexOf(row);\n        // Set the title of the form to show the row number.\n        form.querySelector('[data-region=\"rownumber\"]').textContent =\n            await getString('row', 'customfield_sprogramme', index + 1);\n        form.dataset.action = region;\n\n        // Attache the form to the first row for the first 8 rows.\n        // Then attach it to 8 rows before the clicked row.\n        // This makes sure the form is always visible.\n        const setindex = index - 8;\n        let attachTo;\n        let attachToButton;\n        if (setindex > 0) {\n            attachTo = rowArray[setindex].querySelector(`[${region}]`);\n            attachToButton = rowArray[setindex].querySelector(`[data-action=\"${btnAction}\"]`);\n        } else {\n            attachTo = rowArray[0].querySelector(`[${region}]`);\n            attachToButton = rowArray[0].querySelector(`[data-action=\"${btnAction}\"]`);\n        }\n        attachTo.appendChild(form);\n\n        // Position the form arrow next to the button that was clicked.\n        const rectBtn = btn.getBoundingClientRect();\n        const rectAttachToButton = attachToButton.getBoundingClientRect();\n        arrow.style.top = rectBtn.top - rectAttachToButton.top + 'px';\n        this.renderFormDisciplines(row.dataset.index, region);\n    }\n\n    /**\n     * Remove the discipline form.\n     * @return {void}\n     */\n    closeDisciplineForm() {\n        const container = document.querySelector('[data-region=\"disciplineform-container\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        container.appendChild(form);\n    }\n\n    /**\n     * Select a discipline.\n     * @param {object} discipline The discipline.\n     * @return {void}\n     */\n    async setDisciplineForm(discipline) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const formFieldSearch = form.querySelector('input[type=\"search\"]');\n        const formFieldValue = form.querySelector('#discipline-value');\n        const formFieldDiscipline = form.querySelector('#discipline-id');\n        const formFieldDisciplineName = form.querySelector('#discipline-name');\n        const formFieldLastIds = form.querySelector('#lastids');\n\n        formFieldDiscipline.value = discipline.id;\n        formFieldDisciplineName.value = discipline.name;\n        formFieldSearch.value = discipline.name;\n\n        // Add the discipline id to the formFieldLastIds.\n        const lastIds = formFieldLastIds.value.split(',');\n        if (!lastIds.includes(discipline.id)) {\n            lastIds.push(discipline.id);\n            formFieldLastIds.value = lastIds.join(',');\n        }\n        formFieldValue.focus();\n    }\n\n    // Add a discipline to the row.\n    async addDiscipline() {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = form.querySelector('#discipline-id').value;\n        const disciplinevalue = form.querySelector('#discipline-value').value;\n        const disciplinename = form.querySelector('#discipline-name').value;\n        const discipline = {\n            id: disciplineid,\n            name: disciplinename,\n            percentage: disciplinevalue,\n        };\n        const row = this.getRow(rowid);\n        // Update or add the discipline to the row.\n        const action = form.dataset.action;\n        const containername = action === 'data-disciplines' ? 'container-disciplines' : 'container-competencies';\n        let disciplineIndex = 0;\n        if (action === 'data-disciplines') {\n            disciplineIndex = row.disciplines.findIndex(d => d.id == discipline.id);\n        }\n        if (action === 'data-competencies') {\n            disciplineIndex = row.competencies.findIndex(d => d.id == discipline.id);\n        }\n        const container = document.querySelector(\n            `[${action}][data-rowid=\"${rowid}\"] [data-region=\"${containername}\"]`);\n        const selectedcontainer = form.querySelector('[data-region=\"selected-disciplines\"]');\n        if (disciplineIndex > -1) {\n            if (action === 'data-disciplines') {\n                row.disciplines[disciplineIndex] = discipline;\n            }\n            if (action === 'data-competencies') {\n                row.competencies[disciplineIndex] = discipline;\n            }\n            const rendered = container.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const selected = selectedcontainer.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.replaceNode(rendered, html, js);\n            await Templates.replaceNode(selected, html, js);\n\n        } else {\n            if (action === 'data-disciplines') {\n                row.disciplines.push(discipline);\n            }\n            if (action === 'data-competencies') {\n                row.competencies.push(discipline);\n            }\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.appendNodeContents(container, html, js);\n            await Templates.appendNodeContents(selectedcontainer, html, js);\n        }\n        this.setTableData();\n    }\n\n    /**\n     * Render the disciplines in the form.\n     * @param {int} rowid The rowid.\n     * @param {String} region The region.\n     * @return {void}\n     */\n    async renderFormDisciplines(rowid, region) {\n        const row = this.getRow(rowid);\n        let disciplines = [];\n        if (region === 'data-disciplines') {\n            disciplines = row.disciplines;\n        }\n        if (region === 'data-competencies') {\n            disciplines = row.competencies;\n        }\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const container = form.querySelector('[data-region=\"selected-disciplines\"]');\n        container.innerHTML = '';\n        disciplines.forEach(async(discipline) => {\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            Templates.appendNodeContents(container, html, js);\n        });\n    }\n\n    /**\n     * Remove a discipline from the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async removeDiscipline(btn) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const action = form.dataset.action;\n        const containername = action === 'data-disciplines' ? 'container-disciplines' : 'container-competencies';\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = btn.closest('[data-id]').dataset.id;\n\n        // Remove the discipline from the row.\n        if (action === 'data-disciplines') {\n            const row = this.getRow(rowid);\n            const index = row.disciplines.findIndex(d => d.id == disciplineid);\n            row.disciplines.splice(index, 1);\n        }\n        if (action === 'data-competencies') {\n            const row = this.getRow(rowid);\n            const index = row.competencies.findIndex(d => d.id == disciplineid);\n            row.competencies.splice(index, 1);\n        }\n\n        // Remove the discipline/competency from the view.\n        const container = document.querySelector(\n            `[${action}][data-rowid=\"${rowid}\"] [data-region=\"${containername}\"]`);\n        const selectedcontainer = document.querySelector('[data-region=\"selected-disciplines\"]');\n        const discipline = container.querySelector('[data-id=\"' + disciplineid + '\"]');\n        const selected = selectedcontainer.querySelector('[data-id=\"' + disciplineid + '\"]');\n        container.removeChild(discipline);\n        selectedcontainer.removeChild(selected);\n        this.setTableData();\n    }\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n */\nconst init = (element, courseid) => {\n    new Manager(element, courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","element","courseid","parseInt","addEventListeners","getDatagrid","form","document","querySelector","addEventListener","e","btn","target","closest","preventDefault","actions","input","change","modulename","changeModule","key","navigate","dragging","tagName","effectAllowed","parentNode","dataset","region","rect","getBoundingClientRect","clientY","top","height","insertBefore","nextSibling","rowId","index","prevRowId","previousElementSibling","moduleId","id","updateSortOrder","type","this","moduleid","previd","typeahead","setTableData","getTableData","getTableConfig","response","Repository","getColumns","State","setValue","columns","getData","modules","length","parseModules","createModule","createRow","error","exception","forEach","mod","rows","map","row","cells","cell","column","find","Object","assign","options","option","clonedOption","name","value","selected","edit","getRowObject","checkCellValue","substring","cleanModules","cleanedModules","module","rowObject","cleanedRows","cleanedRow","keys","cleanedCell","disciplines","discipline","cleanedDiscipline","competencies","competency","cleanedCompetency","cleanedModule","sortorder","modulesortorder","push","async","saveConfirmButton","classList","add","getValue","setData","setTimeout","remove","set","action","addRow","deleteRow","addModule","deleteModule","showDisciplineForm","removeDiscipline","closeDisciplineForm","textContent","setDisciplineForm","addDiscipline","rowid","m","splice","indexOf","r","prevrowid","Promise","resolve","undefined","structuredClone","Array","from","children","resetRowSortorder","columnid","rowIndex","findIndex","cellIndex","c","getRow","reduce","acc","concat","mindex","querySelectorAll","removeMatchBold","toLowerCase","includes","makeMatchBold","text","first","slice","match","last","innerHTML","btnAction","arrow","rowArray","setindex","attachTo","attachToButton","appendChild","rectBtn","rectAttachToButton","style","renderFormDisciplines","container","formFieldSearch","formFieldValue","formFieldDiscipline","formFieldDisciplineName","formFieldLastIds","lastIds","split","join","focus","disciplineid","disciplinevalue","percentage","containername","disciplineIndex","d","selectedcontainer","rendered","html","js","Templates","renderForPromise","replaceNode","appendNodeContents","removeChild","currentIndex","currentColumn","allRows","i","nextInput","previousInput","nextColumn","nextElementSibling","previousColumn","init"],"mappings":"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"}