{"version":3,"file":"manager.min.js","sources":["../src/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module manager\n *\n * @module     customfield_sprogramme/manager\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport State from 'customfield_sprogramme/local/state';\nimport Repository from 'customfield_sprogramme/local/repository';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport {debounce} from 'core/utils';\nimport './local/components/table';\n\n/**\n * Manager class.\n * @class\n */\nclass Manager {\n\n    /**\n     * Row number.\n     */\n    rowNumber = 0;\n\n    /**\n     * The courseid.\n     * @type {Number}\n     */\n    courseid;\n\n    /**\n     * The element.\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * The table name.\n     */\n    table = 'customfield_sprogramme';\n\n    /**\n     * The table columns.\n     * @type {Array}\n     */\n    columns = [];\n\n    /**\n     * Constructor.\n     * @param {HTMLElement} element The element.\n     * @param {String} courseid The courseid.\n     * @return {void}\n     */\n    constructor(element, courseid) {\n        this.element = element;\n        this.courseid = parseInt(courseid);\n        this.addEventListeners();\n        this.getDatagrid();\n    }\n\n    /**\n     * Add event listeners.\n     * @return {void}\n     */\n    addEventListeners() {\n        const form = document.querySelector('[data-region=\"app\"]');\n        form.addEventListener('click', (e) => {\n            let btn = e.target.closest('[data-action]');\n            if (btn) {\n                e.preventDefault();\n                this.actions(btn);\n            }\n        });\n        // Listen to all changes in the table.\n        form.addEventListener('change', (e) => {\n            const input = e.target.closest('[data-input]');\n            if (input) {\n                this.change(input);\n            }\n            const modulename = e.target.closest('[data-region=\"modulename\"]');\n            if (modulename) {\n                this.changeModule(modulename);\n            }\n        });\n        // Listen to the arrow down and up keys to navigate to the next or previous row.\n        form.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n                this.navigate(e);\n                e.preventDefault();\n            }\n            if (e.key === 'Enter') {\n                e.preventDefault();\n            }\n        });\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n        });\n\n        let dragging = null;\n\n        form.addEventListener('dragstart', (e) => {\n            if (e.target.tagName === 'TR') {\n                dragging = e.target;\n                e.target.effectAllowed = 'move';\n            }\n        });\n        form.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            const target = e.target.closest('tr');\n            if (target && target !== dragging && target.parentNode.dataset.region === 'rows') {\n                const rect = target.getBoundingClientRect();\n                if (e.clientY - rect.top > rect.height / 2) {\n                    target.parentNode.insertBefore(dragging, target.nextSibling);\n                } else {\n                    target.parentNode.insertBefore(dragging, target);\n                }\n            }\n        });\n        form.addEventListener(\"drop\", (e) => {\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        form.addEventListener('dragend', (e) => {\n            const rowId = dragging.dataset.index;\n            const prevRowId = dragging.previousElementSibling ? dragging.previousElementSibling.dataset.index : 0;\n            const moduleId = dragging.closest('[data-region=\"module\"]').dataset.id;\n            window.console.log('RowId: ' + rowId + ' PrevRowId: ' + prevRowId + ' ModuleId: ' + moduleId);\n            Repository.updateSortOrder(\n                {\n                    type: 'row',\n                    courseid: this.courseid,\n                    moduleid: moduleId,\n                    id: rowId,\n                    previd: prevRowId\n                }\n            );\n            dragging = null;\n            e.preventDefault(); // Voorkom standaard drop-actie\n        });\n        // Disciplines form typeahead, using .disciplineform input[type=\"search\"]\n        // All options are already in the DOM, just show and hide them.\n        // On select return the discipline id and add it in this form to the cell\n        // {id: 1, value: 20}, {id: 2, value: 60}, {id: 7, value: 20}\n        // The value is set to 100 for now, this will be updated later in this code by adding another input field.\n        const disciplineForm = document.querySelector('[data-region=\"disciplineform\"]');\n        const search = disciplineForm.querySelector('input[type=\"search\"]');\n        search.addEventListener('input', (e) => {\n            const input = e.target.closest('input');\n            if (input) {\n                this.typeahead(input);\n            }\n        });\n\n        // Listen for the saveconfirm custom event. When run save the table data.\n        document.addEventListener('saveconfirm', () => {\n            this.setTableData();\n        });\n    }\n\n    async getDatagrid() {\n        await this.getTableData();\n        await this.getTableConfig();\n    }\n\n    /**\n     * Get the table configuration.\n     * @return {Promise} The promise.\n     */\n    async getTableConfig() {\n        const response = await Repository.getColumns({table: this.table});\n        await State.setValue('columns', response.columns);\n    }\n\n    /**\n     * Get the table data.\n     * @return {void}\n     */\n    async getTableData() {\n        try {\n            const response = await Repository.getData({courseid: this.courseid});\n            // Validate the response, the response.date should be a string that can be parsed to a JSON object.\n            if (response.modules.length > 0) {\n                const modules = this.parseModules(response.modules);\n                State.setValue('modules', modules);\n            } else {\n                const moduleid = await this.createModule('Module 1', 0);\n                await this.createRow(moduleid, 0, 0);\n                this.getTableData();\n            }\n        } catch (error) {\n            Notification.exception(error);\n        }\n    }\n\n    /**\n     * Parse the modules, add the correct column properties to each cell.\n     * @param {Array} modules The modules.\n     * @return {Array} The parsed rows.\n     */\n    parseModules(modules) {\n        modules.forEach(mod => {\n            mod.rows.map(row => {\n                row.cells = row.cells.map(cell => {\n                    const column = mod.columns.find(column => column.column == cell.column);\n                    // Clone the column properties to the cell but keep the cell properties.\n                    cell = Object.assign({}, cell, column);\n                    if (cell.type === 'select') {\n                        // Clone the options array to avoid shared references\n                        cell.options = cell.options.map(option => {\n                            const clonedOption = Object.assign({}, option);\n                            if (clonedOption.name == cell.value) {\n                                clonedOption.selected = true;\n                            }\n                            return clonedOption;\n                        });\n                    }\n                    cell.edit = true;\n                    return cell;\n                });\n                return row;\n            });\n        });\n        return modules;\n    }\n\n    /**\n     * Get the row object that can be accepted by the webservice.\n     * @return {Array} The keys.\n     */\n    getRowObject() {\n        return {\n            'rows': {\n                'id': 'id',\n                'sortorder': 'sortorder',\n                'cells': {\n                    'type': 'type',\n                    'column': 'column',\n                    'value': 'value',\n                },\n                'disciplines': {\n                    'id': 'id',\n                    'name': 'name',\n                    'percentage': 'percentage',\n                },\n            },\n        };\n    }\n\n    /**\n     * Clean the Modules array.\n     * @param {Array} modules The modules.\n     * @return {Array} The cleaned modules.\n     */\n    cleanModules(modules) {\n        const cleanedModules = [];\n        modules.forEach(module => {\n            const rows = module.rows;\n            const rowObject = this.getRowObject();\n            const cleanedRows = rows.map(row => {\n                const cleanedRow = {};\n                Object.keys(rowObject.rows).forEach(key => {\n                    cleanedRow[key] = row[key];\n                });\n                // Clean the cells.\n                cleanedRow.cells = row.cells.map(cell => {\n                    const cleanedCell = {};\n                    Object.keys(rowObject.rows.cells).forEach(key => {\n                        cleanedCell[key] = cell[key];\n                    });\n                    return cleanedCell;\n                });\n                // Clean the disciplines.\n                cleanedRow.disciplines = row.disciplines.map(discipline => {\n                    const cleanedDiscipline = {};\n                    Object.keys(rowObject.rows.disciplines).forEach(key => {\n                        cleanedDiscipline[key] = discipline[key];\n                    });\n                    return cleanedDiscipline;\n                });\n                return cleanedRow;\n            });\n            const cleanedModule = {};\n            cleanedModule.id = module.moduleid;\n            cleanedModule.sortorder = module.modulesortorder;\n            cleanedModule.name = module.modulename;\n            cleanedModule.rows = cleanedRows;\n            cleanedModules.push(cleanedModule);\n        });\n        return cleanedModules;\n    }\n\n    /**\n     * Set the table data.\n     * @return {void}\n     */\n    async setTableData() {\n        const set = debounce(async() => {\n            const saveConfirmButton = document.querySelector('[data-action=\"saveconfirm\"]');\n            saveConfirmButton.classList.add('saving');\n            const modules = State.getValue('modules');\n            const cleanedModules = this.cleanModules(modules);\n            const response = await Repository.setData({courseid: this.courseid, modules: cleanedModules});\n            if (!response) {\n                Notification.exception('No response from the server');\n            }\n            setTimeout(() => {\n                saveConfirmButton.classList.remove('saving');\n            }, 200);\n        }, 600);\n        set();\n    }\n\n    /**\n     * Actions.\n     * @param {object} btn The button that was clicked.\n     */\n    actions(btn) {\n        if (btn.dataset.action === 'addrow') {\n            this.addRow(btn);\n        }\n        if (btn.dataset.action === 'deleterow') {\n            this.deleteRow(btn);\n        }\n        if (btn.dataset.action === 'addmodule') {\n            this.addModule(btn);\n        }\n        if (btn.dataset.action === 'deletemodule') {\n            this.deleteModule(btn);\n        }\n        if (btn.dataset.action === 'adddisc') {\n            this.showDisciplineForm(btn);\n        }\n        if (btn.dataset.action === 'removedisc') {\n            this.removeDiscipline(btn);\n        }\n        if (btn.dataset.action === 'closedisciplineform') {\n            this.closeDisciplineForm();\n        }\n        if (btn.dataset.action === 'selectdiscipline') {\n            const option = btn.closest('[data-option]');\n            const discipline = {\n                id: option.dataset.id,\n                name: option.textContent,\n            };\n            this.setDisciplineForm(discipline);\n        }\n        if (btn.dataset.action === 'discipline-confirm') {\n            this.addDiscipline();\n        }\n        if (btn.dataset.action === 'saveconfirm') {\n            this.setTableData();\n        }\n    }\n\n    /**\n     * Inject a new row after this row.\n     * @param {object} btn The button that was clicked.\n     */\n    async addRow(btn) {\n        const modules = State.getValue('modules');\n\n        let rowid = btn.dataset.id;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const rows = module.rows;\n        // When called from the link under the table, the rowid is not set.\n        if (rowid == -1) {\n            rowid = rows[rows.length - 1].id;\n        }\n\n        const row = await this.createRow(moduleid, rowid);\n        if (!row) {\n            return;\n        }\n        // Inject the row after the clicked row.\n        rows.splice(rows.indexOf(rows.find(r => r.id == rowid)) + 1, 0, row);\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Create a new row.\n     *\n     * @param {Number} moduleid The moduleid.\n     * @param {Number} prevrowid The previous rowid.\n     * @return {Promise} The promise.\n     */\n    async createRow(moduleid, prevrowid) {\n        const rowid = await Repository.createRow({courseid: this.courseid, moduleid: moduleid, prevrowid: prevrowid});\n        return new Promise((resolve) => {\n            const row = {};\n            row.id = rowid;\n            const columns = State.getValue('columns');\n            if (columns === undefined) {\n                resolve();\n                return;\n            }\n            // The copy the columns to the row and call them cells.\n            row.cells = columns.map(column => structuredClone(column));\n            // Set the correct types for the cells.\n            row.cells.forEach(cell => {\n                cell.edit = true;\n                cell.value = '';\n                cell[cell.type] = true;\n            });\n            row.disciplines = [];\n            resolve(row);\n        });\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     */\n    async deleteRow(btn) {\n        const modules = State.getValue('modules');\n        const rowid = btn.closest('[data-row]').dataset.index;\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteRow({courseid: this.courseid, rowid: rowid});\n        return new Promise((resolve) => {\n            if (response) {\n                const rows = module.rows;\n                const index = Array.from(btn.closest('[data-region=\"rows\"]').children).indexOf(btn.closest('[data-row]'));\n                rows.splice(index, 1);\n                this.resetRowSortorder();\n                State.setValue('modules', modules);\n            }\n            resolve(rowid);\n        });\n    }\n\n    /**\n     * Change.\n     * @param {object} input The input that was changed.\n     */\n    change(input) {\n        const row = input.closest('[data-row]');\n        const cell = input.closest('[data-cell]');\n        const value = input.value;\n        const columnid = cell.dataset.columnid;\n        const index = row.dataset.index;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            // Find the correct cell in the row.\n            const rowIndex = module.rows.findIndex(r => r.id == index);\n            if (rowIndex === -1) {\n                return;\n            }\n            const cellIndex = module.rows[rowIndex].cells.findIndex(c => c.columnid == columnid);\n            module.rows[rowIndex].cells[cellIndex].value = value;\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Change the module name.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    changeModule(input) {\n        const module = input.closest('[data-region=\"module\"]');\n        const moduleid = module.dataset.id;\n        const name = input.value;\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            if (module.moduleid == moduleid) {\n                module.modulename = name;\n            }\n        });\n        this.setTableData();\n    }\n\n    /**\n     * Delete a module.\n     * @param {object} btn The button that was clicked.\n     * @return {Promise} The promise.\n     * @return {void}\n     */\n    async deleteModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleid = btn.closest('[data-region=\"module\"]').dataset.id;\n        const module = modules.find(m => m.moduleid == moduleid);\n        const response = await Repository.deleteModule({courseid: this.courseid, moduleid: moduleid});\n        return new Promise((resolve) => {\n            if (response) {\n                const index = modules.indexOf(module);\n                modules.splice(index, 1);\n                State.setValue('modules', modules);\n            }\n            resolve(moduleid);\n        });\n    }\n\n    /**\n     * Create a new module.\n     * @param {String} name The name.\n     * @param {Number} index The index.\n     * @return {Promise} The promise.\n     */\n    async createModule(name, index) {\n        const id = await Repository.createModule({name: name, courseid: this.courseid, sortorder: index});\n        return new Promise((resolve) => {\n            resolve(id);\n        });\n    }\n\n    /**\n     * Add a new module.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async addModule(btn) {\n        const modules = State.getValue('modules');\n        const moduleRow = btn.closest('[data-region=\"module\"]');\n        const index = Array.from(moduleRow.parentElement.children).indexOf(moduleRow);\n        const moduleid = await this.createModule('Module ' + (index + 2), index);\n        const row = await this.createRow(moduleid, 0);\n        const module = {\n            moduleid: moduleid,\n            modulesortorder: index + 1,\n            modulename: 'Module ' + (index + 2),\n            rows: [row],\n        };\n        modules.push(module);\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Get the row from the state.\n     * @param {int} rowid The rowid.\n     */\n    getRow(rowid) {\n        const modules = State.getValue('modules');\n        // Combine all rows in one array.\n        const rows = modules.reduce((acc, module) => {\n            return acc.concat(module.rows);\n        }, []);\n        const row = rows.find(r => r.id == rowid);\n        return row;\n    }\n\n    /**\n     * Reset the row sortorder values.\n     * @return {void}\n     */\n    resetRowSortorder() {\n        const modules = State.getValue('modules');\n        modules.forEach(module => {\n            module.rows.forEach((row, index) => {\n                row.sortorder = index;\n            });\n        });\n        State.setValue('modules', modules);\n    }\n\n    /**\n     * Typeahead.\n     * Limit to 5 options.\n     * @param {object} input The input that was changed.\n     * @return {void}\n     */\n    typeahead(input) {\n        const value = input.value;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const options = form.querySelectorAll('[data-option]');\n        options.forEach(option => {\n            this.removeMatchBold(option);\n            if (option.textContent.toLowerCase().includes(value.toLowerCase())) {\n                option.classList.remove('d-none');\n                this.makeMatchBold(option, value);\n            } else {\n                option.classList.add('d-none');\n            }\n        });\n    }\n\n    /**\n     * Make the match bold.\n     * @param {object} option The option.\n     * @param {string} value The value.\n     * @return {void}\n     */\n    makeMatchBold(option, value) {\n        const text = option.textContent;\n        const index = text.toLowerCase().indexOf(value.toLowerCase());\n        const first = text.slice(0, index);\n        const match = text.slice(index, index + value.length);\n        const last = text.slice(index + value.length);\n        option.innerHTML = first + '<strong>' + match + '</strong>' + last;\n    }\n\n    /**\n     * Remove the match bold.\n     * @param {object} option The option.\n     * @return {void}\n     */\n    removeMatchBold(option) {\n        option.innerHTML = option.textContent;\n    }\n\n    /**\n     * Add a discipline to the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async showDisciplineForm(btn) {\n        const row = btn.closest('[data-row]');\n        const module = btn.closest('[data-region=\"module\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        form.querySelector('#rowid').value = row.dataset.index;\n        const arrow = form.querySelector('.formarrow');\n\n\n        // Get the row index nr based on the row position in the table.\n        const rows = module.querySelectorAll('[data-region=\"rows\"] [data-row]');\n        const rowArray = Array.from(rows);\n        const index = rowArray.indexOf(row);\n        // Set the title of the form to show the row number.\n        form.querySelector('[data-region=\"rownumber\"]').textContent =\n            await getString('row', 'customfield_sprogramme', index + 1);\n\n        // Attache the form to the first row for the first 8 rows.\n        // Then attach it to 8 rows before the clicked row.\n        // This makes sure the form is always visible.\n        const setindex = index - 8;\n        let attachTo;\n        let attachToButton;\n        if (setindex > 0) {\n            attachTo = rowArray[setindex].querySelector('[data-disciplines]');\n            attachToButton = rowArray[setindex].querySelector('[data-action=\"adddisc\"]');\n        } else {\n            attachTo = rowArray[0].querySelector('[data-disciplines]');\n            attachToButton = rowArray[0].querySelector('[data-action=\"adddisc\"]');\n        }\n        attachTo.appendChild(form);\n\n        // Position the form arrow next to the button that was clicked.\n        const rectBtn = btn.getBoundingClientRect();\n        const rectAttachToButton = attachToButton.getBoundingClientRect();\n        arrow.style.top = rectBtn.top - rectAttachToButton.top + 'px';\n        this.renderFormDisciplines(row.dataset.index);\n    }\n\n    /**\n     * Remove the discipline form.\n     * @return {void}\n     */\n    closeDisciplineForm() {\n        const container = document.querySelector('[data-region=\"disciplineform-container\"]');\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        container.appendChild(form);\n    }\n\n    /**\n     * Select a discipline.\n     * @param {object} discipline The discipline.\n     * @return {void}\n     */\n    async setDisciplineForm(discipline) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const formFieldSearch = form.querySelector('input[type=\"search\"]');\n        const formFieldValue = form.querySelector('#discipline-value');\n        const formFieldDiscipline = form.querySelector('#discipline-id');\n        const formFieldDisciplineName = form.querySelector('#discipline-name');\n        const formFieldLastIds = form.querySelector('#lastids');\n\n        formFieldDiscipline.value = discipline.id;\n        formFieldDisciplineName.value = discipline.name;\n        formFieldSearch.value = discipline.name;\n\n        // Add the discipline id to the formFieldLastIds.\n        const lastIds = formFieldLastIds.value.split(',');\n        if (!lastIds.includes(discipline.id)) {\n            lastIds.push(discipline.id);\n            formFieldLastIds.value = lastIds.join(',');\n        }\n        formFieldValue.focus();\n    }\n\n    // Add a discipline to the row.\n    async addDiscipline() {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = form.querySelector('#discipline-id').value;\n        const disciplinevalue = form.querySelector('#discipline-value').value;\n        const disciplinename = form.querySelector('#discipline-name').value;\n        const discipline = {\n            id: disciplineid,\n            name: disciplinename,\n            percentage: disciplinevalue,\n        };\n        const row = this.getRow(rowid);\n        // Update or add the discipline to the row.\n        const disciplineIndex = row.disciplines.findIndex(d => d.id == discipline.id);\n        const container = document.querySelector(\n            '[data-disciplines][data-rowid=\"' + rowid + '\"] [data-region=\"container-disciplines\"]');\n        const selectedcontainer = form.querySelector('[data-region=\"selected-disciplines\"]');\n        if (disciplineIndex > -1) {\n            row.disciplines[disciplineIndex] = discipline;\n            const rendered = container.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const selected = selectedcontainer.querySelector('[data-id=\"' + discipline.id + '\"]');\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.replaceNode(rendered, html, js);\n            await Templates.replaceNode(selected, html, js);\n\n        } else {\n            row.disciplines.push(discipline);\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            await Templates.appendNodeContents(container, html, js);\n            await Templates.appendNodeContents(selectedcontainer, html, js);\n        }\n        this.setTableData();\n    }\n\n    /**\n     * Render the disciplines in the form.\n     * @param {int} rowid The rowid.\n     * @return {void}\n     */\n    async renderFormDisciplines(rowid) {\n        const row = this.getRow(rowid);\n        const disciplines = row.disciplines;\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const container = form.querySelector('[data-region=\"selected-disciplines\"]');\n        container.innerHTML = '';\n        disciplines.forEach(async(discipline) => {\n            const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/discipline', discipline);\n            Templates.appendNodeContents(container, html, js);\n        });\n    }\n\n    /**\n     * Remove a discipline from the row.\n     * @param {object} btn The button that was clicked.\n     * @return {void}\n     */\n    async removeDiscipline(btn) {\n        const form = document.querySelector('[data-region=\"disciplineform\"]');\n        const rowid = form.querySelector('#rowid').value;\n        const disciplineid = btn.closest('[data-id]').dataset.id;\n        const row = this.getRow(rowid);\n        const index = row.disciplines.findIndex(d => d.id == disciplineid);\n        row.disciplines.splice(index, 1);\n        const container = document.querySelector(\n            '[data-disciplines][data-rowid=\"' + rowid + '\"] [data-region=\"container-disciplines\"]');\n        const selectedcontainer = document.querySelector('[data-region=\"selected-disciplines\"]');\n        const discipline = container.querySelector('[data-id=\"' + disciplineid + '\"]');\n        const selected = selectedcontainer.querySelector('[data-id=\"' + disciplineid + '\"]');\n        container.removeChild(discipline);\n        selectedcontainer.removeChild(selected);\n        this.setTableData();\n    }\n\n    /**\n     * Navigate to the next or previous row and left or right column.\n     * @param {Event} e The event.\n     * @return {void}\n     */\n    navigate(e) {\n        const currentIndex = e.target.closest('[data-row]').dataset.index;\n        const currentColumn = e.target.closest('[data-cell]').dataset.columnid;\n        const allRows = document.querySelectorAll('[data-row]');\n        for (let i = 0; i < allRows.length; i++) {\n            if (allRows[i].dataset.index == currentIndex) {\n                if (e.key === 'ArrowDown' && i < allRows.length - 1) {\n                    const nextInput = allRows[i + 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (nextInput) {\n                        nextInput.focus();\n                    }\n                }\n                if (e.key === 'ArrowUp' && i > 0) {\n                    const previousInput = allRows[i - 1].querySelector(`[data-columnid=\"${currentColumn}\"] input`);\n                    if (previousInput) {\n                        previousInput.focus();\n                    }\n                }\n            }\n        }\n        // This part is not working yet, it might not be accessible.\n        if (e.key === 'ArrowRight') {\n            const nextColumn = e.target.closest('[data-cell]').nextElementSibling;\n            if (nextColumn) {\n                nextColumn.focus();\n            }\n        }\n        if (e.key === 'ArrowLeft') {\n            const previousColumn = e.target.closest('[data-cell]').previousElementSibling;\n            if (previousColumn) {\n                previousColumn.focus();\n            }\n        }\n    }\n\n}\n\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n */\nconst init = (element, courseid) => {\n    new Manager(element, courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["Manager","constructor","element","courseid","parseInt","addEventListeners","getDatagrid","form","document","querySelector","addEventListener","e","btn","target","closest","preventDefault","actions","input","change","modulename","changeModule","key","navigate","dragging","tagName","effectAllowed","parentNode","dataset","region","rect","getBoundingClientRect","clientY","top","height","insertBefore","nextSibling","rowId","index","prevRowId","previousElementSibling","moduleId","id","window","console","log","updateSortOrder","type","this","moduleid","previd","typeahead","setTableData","getTableData","getTableConfig","response","Repository","getColumns","table","State","setValue","columns","getData","modules","length","parseModules","createModule","createRow","error","exception","forEach","mod","rows","map","row","cells","cell","column","find","Object","assign","options","option","clonedOption","name","value","selected","edit","getRowObject","cleanModules","cleanedModules","module","rowObject","cleanedRows","cleanedRow","keys","cleanedCell","disciplines","discipline","cleanedDiscipline","cleanedModule","sortorder","modulesortorder","push","async","saveConfirmButton","classList","add","getValue","setData","setTimeout","remove","set","action","addRow","deleteRow","addModule","deleteModule","showDisciplineForm","removeDiscipline","closeDisciplineForm","textContent","setDisciplineForm","addDiscipline","rowid","m","splice","indexOf","r","prevrowid","Promise","resolve","undefined","structuredClone","Array","from","children","resetRowSortorder","columnid","rowIndex","findIndex","cellIndex","c","moduleRow","parentElement","getRow","reduce","acc","concat","querySelectorAll","removeMatchBold","toLowerCase","includes","makeMatchBold","text","first","slice","match","last","innerHTML","arrow","rowArray","setindex","attachTo","attachToButton","appendChild","rectBtn","rectAttachToButton","style","renderFormDisciplines","container","formFieldSearch","formFieldValue","formFieldDiscipline","formFieldDisciplineName","formFieldLastIds","lastIds","split","join","focus","disciplineid","disciplinevalue","percentage","disciplineIndex","d","selectedcontainer","rendered","html","js","Templates","renderForPromise","replaceNode","appendNodeContents","removeChild","currentIndex","currentColumn","allRows","i","nextInput","previousInput","nextColumn","nextElementSibling","previousColumn","init"],"mappings":"kzBAmCMA,QAoCFC,YAAYC,QAASC,2CA/BT,+GAiBJ,yDAME,SASDD,QAAUA,aACVC,SAAWC,SAASD,eACpBE,yBACAC,cAOTD,0BACUE,KAAOC,SAASC,cAAc,uBACpCF,KAAKG,iBAAiB,SAAUC,QACxBC,IAAMD,EAAEE,OAAOC,QAAQ,iBACvBF,MACAD,EAAEI,sBACGC,QAAQJ,SAIrBL,KAAKG,iBAAiB,UAAWC,UACvBM,MAAQN,EAAEE,OAAOC,QAAQ,gBAC3BG,YACKC,OAAOD,aAEVE,WAAaR,EAAEE,OAAOC,QAAQ,8BAChCK,iBACKC,aAAaD,eAI1BZ,KAAKG,iBAAiB,WAAYC,IAChB,cAAVA,EAAEU,KAAiC,YAAVV,EAAEU,WACtBC,SAASX,GACdA,EAAEI,kBAEQ,UAAVJ,EAAEU,KACFV,EAAEI,oBAGVR,KAAKG,iBAAiB,UAAWC,IAC7BA,EAAEI,wBAGFQ,SAAW,KAEfhB,KAAKG,iBAAiB,aAAcC,IACP,OAArBA,EAAEE,OAAOW,UACTD,SAAWZ,EAAEE,OACbF,EAAEE,OAAOY,cAAgB,WAGjClB,KAAKG,iBAAiB,YAAaC,IAC/BA,EAAEI,uBACIF,OAASF,EAAEE,OAAOC,QAAQ,SAC5BD,QAAUA,SAAWU,UAAiD,SAArCV,OAAOa,WAAWC,QAAQC,OAAmB,OACxEC,KAAOhB,OAAOiB,wBAChBnB,EAAEoB,QAAUF,KAAKG,IAAMH,KAAKI,OAAS,EACrCpB,OAAOa,WAAWQ,aAAaX,SAAUV,OAAOsB,aAEhDtB,OAAOa,WAAWQ,aAAaX,SAAUV,YAIrDN,KAAKG,iBAAiB,QAASC,IAC3BA,EAAEI,oBAENR,KAAKG,iBAAiB,WAAYC,UACxByB,MAAQb,SAASI,QAAQU,MACzBC,UAAYf,SAASgB,uBAAyBhB,SAASgB,uBAAuBZ,QAAQU,MAAQ,EAC9FG,SAAWjB,SAAST,QAAQ,0BAA0Ba,QAAQc,GACpEC,OAAOC,QAAQC,IAAI,UAAYR,MAAQ,eAAiBE,UAAY,cAAgBE,8BACzEK,gBACP,CACIC,KAAM,MACN3C,SAAU4C,KAAK5C,SACf6C,SAAUR,SACVC,GAAIL,MACJa,OAAQX,YAGhBf,SAAW,KACXZ,EAAEI,oBAOiBP,SAASC,cAAc,kCAChBA,cAAc,wBACrCC,iBAAiB,SAAUC,UACxBM,MAAQN,EAAEE,OAAOC,QAAQ,SAC3BG,YACKiC,UAAUjC,UAKvBT,SAASE,iBAAiB,eAAe,UAChCyC,4CAKHJ,KAAKK,qBACLL,KAAKM,8CAQLC,eAAiBC,oBAAWC,WAAW,CAACC,MAAOV,KAAKU,cACpDC,eAAMC,SAAS,UAAWL,SAASM,wCAS/BN,eAAiBC,oBAAWM,QAAQ,CAAC1D,SAAU4C,KAAK5C,cAEtDmD,SAASQ,QAAQC,OAAS,EAAG,OACvBD,QAAUf,KAAKiB,aAAaV,SAASQ,wBACrCH,SAAS,UAAWG,aACvB,OACGd,eAAiBD,KAAKkB,aAAa,WAAY,SAC/ClB,KAAKmB,UAAUlB,SAAU,EAAG,QAC7BI,gBAEX,MAAOe,6BACQC,UAAUD,QAS/BH,aAAaF,gBACTA,QAAQO,SAAQC,MACZA,IAAIC,KAAKC,KAAIC,MACTA,IAAIC,MAAQD,IAAIC,MAAMF,KAAIG,aAChBC,OAASN,IAAIV,QAAQiB,MAAKD,QAAUA,OAAOA,QAAUD,KAAKC,eAG9C,YADlBD,KAAOG,OAAOC,OAAO,GAAIJ,KAAMC,SACtB9B,OAEL6B,KAAKK,QAAUL,KAAKK,QAAQR,KAAIS,eACtBC,aAAeJ,OAAOC,OAAO,GAAIE,eACnCC,aAAaC,MAAQR,KAAKS,QAC1BF,aAAaG,UAAW,GAErBH,iBAGfP,KAAKW,MAAO,EACLX,QAEJF,UAGRX,QAOXyB,qBACW,MACK,IACE,eACO,kBACJ,MACG,cACE,eACD,qBAEE,IACL,UACE,kBACM,gBAW9BC,aAAa1B,eACH2B,eAAiB,UACvB3B,QAAQO,SAAQqB,eACNnB,KAAOmB,OAAOnB,KACdoB,UAAY5C,KAAKwC,eACjBK,YAAcrB,KAAKC,KAAIC,YACnBoB,WAAa,UACnBf,OAAOgB,KAAKH,UAAUpB,MAAMF,SAAQhD,MAChCwE,WAAWxE,KAAOoD,IAAIpD,QAG1BwE,WAAWnB,MAAQD,IAAIC,MAAMF,KAAIG,aACvBoB,YAAc,UACpBjB,OAAOgB,KAAKH,UAAUpB,KAAKG,OAAOL,SAAQhD,MACtC0E,YAAY1E,KAAOsD,KAAKtD,QAErB0E,eAGXF,WAAWG,YAAcvB,IAAIuB,YAAYxB,KAAIyB,mBACnCC,kBAAoB,UAC1BpB,OAAOgB,KAAKH,UAAUpB,KAAKyB,aAAa3B,SAAQhD,MAC5C6E,kBAAkB7E,KAAO4E,WAAW5E,QAEjC6E,qBAEJL,cAELM,cAAgB,GACtBA,cAAc1D,GAAKiD,OAAO1C,SAC1BmD,cAAcC,UAAYV,OAAOW,gBACjCF,cAAchB,KAAOO,OAAOvE,WAC5BgF,cAAc5B,KAAOqB,YACrBH,eAAea,KAAKH,kBAEjBV,qCAQK,oBAASc,gBACXC,kBAAoBhG,SAASC,cAAc,+BACjD+F,kBAAkBC,UAAUC,IAAI,gBAC1B5C,QAAUJ,eAAMiD,SAAS,WACzBlB,eAAiB1C,KAAKyC,aAAa1B,eAClBP,oBAAWqD,QAAQ,CAACzG,SAAU4C,KAAK5C,SAAU2D,QAAS2B,wCAE5DrB,UAAU,+BAE3ByC,YAAW,KACPL,kBAAkBC,UAAUK,OAAO,YACpC,OACJ,IACHC,GAOJ/F,QAAQJ,QACuB,WAAvBA,IAAIe,QAAQqF,aACPC,OAAOrG,KAEW,cAAvBA,IAAIe,QAAQqF,aACPE,UAAUtG,KAEQ,cAAvBA,IAAIe,QAAQqF,aACPG,UAAUvG,KAEQ,iBAAvBA,IAAIe,QAAQqF,aACPI,aAAaxG,KAEK,YAAvBA,IAAIe,QAAQqF,aACPK,mBAAmBzG,KAED,eAAvBA,IAAIe,QAAQqF,aACPM,iBAAiB1G,KAEC,wBAAvBA,IAAIe,QAAQqF,aACPO,sBAEkB,qBAAvB3G,IAAIe,QAAQqF,OAA+B,OACrC/B,OAASrE,IAAIE,QAAQ,iBACrBmF,WAAa,CACfxD,GAAIwC,OAAOtD,QAAQc,GACnB0C,KAAMF,OAAOuC,kBAEZC,kBAAkBxB,YAEA,uBAAvBrF,IAAIe,QAAQqF,aACPU,gBAEkB,gBAAvB9G,IAAIe,QAAQqF,aACP7D,4BAQAvC,WACHkD,QAAUJ,eAAMiD,SAAS,eAE3BgB,MAAQ/G,IAAIe,QAAQc,SAClBO,SAAWpC,IAAIE,QAAQ,0BAA0Ba,QAAQc,GAEzD8B,KADST,QAAQe,MAAK+C,GAAKA,EAAE5E,UAAYA,WAC3BuB,MAEN,GAAVoD,QACAA,MAAQpD,KAAKA,KAAKR,OAAS,GAAGtB,UAG5BgC,UAAY1B,KAAKmB,UAAUlB,SAAU2E,OACtClD,MAILF,KAAKsD,OAAOtD,KAAKuD,QAAQvD,KAAKM,MAAKkD,GAAKA,EAAEtF,IAAMkF,SAAU,EAAG,EAAGlD,oBAC1Dd,SAAS,UAAWG,0BAUdd,SAAUgF,iBAChBL,YAAcpE,oBAAWW,UAAU,CAAC/D,SAAU4C,KAAK5C,SAAU6C,SAAUA,SAAUgF,UAAWA,mBAC3F,IAAIC,SAASC,gBACVzD,IAAM,GACZA,IAAIhC,GAAKkF,YACH/D,QAAUF,eAAMiD,SAAS,gBACfwB,IAAZvE,SAKJa,IAAIC,MAAQd,QAAQY,KAAII,QAAUwD,gBAAgBxD,UAElDH,IAAIC,MAAML,SAAQM,OACdA,KAAKW,MAAO,EACZX,KAAKS,MAAQ,GACbT,KAAKA,KAAK7B,OAAQ,KAEtB2B,IAAIuB,YAAc,GAClBkC,QAAQzD,MAZJyD,6BAqBItH,WACNkD,QAAUJ,eAAMiD,SAAS,WACzBgB,MAAQ/G,IAAIE,QAAQ,cAAca,QAAQU,MAC1CW,SAAWpC,IAAIE,QAAQ,0BAA0Ba,QAAQc,GACzDiD,OAAS5B,QAAQe,MAAK+C,GAAKA,EAAE5E,UAAYA,WACzCM,eAAiBC,oBAAW2D,UAAU,CAAC/G,SAAU4C,KAAK5C,SAAUwH,MAAOA,eACtE,IAAIM,SAASC,aACZ5E,SAAU,OACJiB,KAAOmB,OAAOnB,KACdlC,MAAQgG,MAAMC,KAAK1H,IAAIE,QAAQ,wBAAwByH,UAAUT,QAAQlH,IAAIE,QAAQ,eAC3FyD,KAAKsD,OAAOxF,MAAO,QACdmG,mCACC7E,SAAS,UAAWG,SAE9BoE,QAAQP,UAQhBzG,OAAOD,aACGwD,IAAMxD,MAAMH,QAAQ,cACpB6D,KAAO1D,MAAMH,QAAQ,eACrBsE,MAAQnE,MAAMmE,MACdqD,SAAW9D,KAAKhD,QAAQ8G,SACxBpG,MAAQoC,IAAI9C,QAAQU,MACVqB,eAAMiD,SAAS,WACvBtC,SAAQqB,eAENgD,SAAWhD,OAAOnB,KAAKoE,WAAUZ,GAAKA,EAAEtF,IAAMJ,YAClC,IAAdqG,sBAGEE,UAAYlD,OAAOnB,KAAKmE,UAAUhE,MAAMiE,WAAUE,GAAKA,EAAEJ,UAAYA,WAC3E/C,OAAOnB,KAAKmE,UAAUhE,MAAMkE,WAAWxD,MAAQA,cAE9CjC,eAQT/B,aAAaH,aAEH+B,SADS/B,MAAMH,QAAQ,0BACLa,QAAQc,GAC1B0C,KAAOlE,MAAMmE,MACH1B,eAAMiD,SAAS,WACvBtC,SAAQqB,SACRA,OAAO1C,UAAYA,WACnB0C,OAAOvE,WAAagE,cAGvBhC,kCASUvC,WACTkD,QAAUJ,eAAMiD,SAAS,WACzB3D,SAAWpC,IAAIE,QAAQ,0BAA0Ba,QAAQc,GACzDiD,OAAS5B,QAAQe,MAAK+C,GAAKA,EAAE5E,UAAYA,WACzCM,eAAiBC,oBAAW6D,aAAa,CAACjH,SAAU4C,KAAK5C,SAAU6C,SAAUA,kBAC5E,IAAIiF,SAASC,aACZ5E,SAAU,OACJjB,MAAQyB,QAAQgE,QAAQpC,QAC9B5B,QAAQ+D,OAAOxF,MAAO,kBAChBsB,SAAS,UAAWG,SAE9BoE,QAAQlF,gCAUGmC,KAAM9C,aACfI,SAAWc,oBAAWU,aAAa,CAACkB,KAAMA,KAAMhF,SAAU4C,KAAK5C,SAAUiG,UAAW/D,eACnF,IAAI4F,SAASC,UAChBA,QAAQzF,uBASA7B,WACNkD,QAAUJ,eAAMiD,SAAS,WACzBmC,UAAYlI,IAAIE,QAAQ,0BACxBuB,MAAQgG,MAAMC,KAAKQ,UAAUC,cAAcR,UAAUT,QAAQgB,WAC7D9F,eAAiBD,KAAKkB,aAAa,WAAa5B,MAAQ,GAAIA,OAE5DqD,OAAS,CACX1C,SAAUA,SACVqD,gBAAiBhE,MAAQ,EACzBlB,WAAY,WAAakB,MAAQ,GACjCkC,KAAM,OALQxB,KAAKmB,UAAUlB,SAAU,KAO3Cc,QAAQwC,KAAKZ,uBACP/B,SAAS,UAAWG,SAO9BkF,OAAOrB,cACajE,eAAMiD,SAAS,WAEVsC,QAAO,CAACC,IAAKxD,SACvBwD,IAAIC,OAAOzD,OAAOnB,OAC1B,IACcM,MAAKkD,GAAKA,EAAEtF,IAAMkF,QAQvCa,0BACU1E,QAAUJ,eAAMiD,SAAS,WAC/B7C,QAAQO,SAAQqB,SACZA,OAAOnB,KAAKF,SAAQ,CAACI,IAAKpC,SACtBoC,IAAI2B,UAAY/D,2BAGlBsB,SAAS,UAAWG,SAS9BZ,UAAUjC,aACAmE,MAAQnE,MAAMmE,MACP5E,SAASC,cAAc,kCACf2I,iBAAiB,iBAC9B/E,SAAQY,cACPoE,gBAAgBpE,QACjBA,OAAOuC,YAAY8B,cAAcC,SAASnE,MAAMkE,gBAChDrE,OAAOwB,UAAUK,OAAO,eACnB0C,cAAcvE,OAAQG,QAE3BH,OAAOwB,UAAUC,IAAI,aAWjC8C,cAAcvE,OAAQG,aACZqE,KAAOxE,OAAOuC,YACdnF,MAAQoH,KAAKH,cAAcxB,QAAQ1C,MAAMkE,eACzCI,MAAQD,KAAKE,MAAM,EAAGtH,OACtBuH,MAAQH,KAAKE,MAAMtH,MAAOA,MAAQ+C,MAAMrB,QACxC8F,KAAOJ,KAAKE,MAAMtH,MAAQ+C,MAAMrB,QACtCkB,OAAO6E,UAAYJ,MAAQ,WAAaE,MAAQ,YAAcC,KAQlER,gBAAgBpE,QACZA,OAAO6E,UAAY7E,OAAOuC,qCAQL5G,WACf6D,IAAM7D,IAAIE,QAAQ,cAClB4E,OAAS9E,IAAIE,QAAQ,0BACrBP,KAAOC,SAASC,cAAc,kCACpCF,KAAKE,cAAc,UAAU2E,MAAQX,IAAI9C,QAAQU,YAC3C0H,MAAQxJ,KAAKE,cAAc,cAI3B8D,KAAOmB,OAAO0D,iBAAiB,mCAC/BY,SAAW3B,MAAMC,KAAK/D,MACtBlC,MAAQ2H,SAASlC,QAAQrD,KAE/BlE,KAAKE,cAAc,6BAA6B+G,kBACtC,kBAAU,MAAO,yBAA0BnF,MAAQ,SAKvD4H,SAAW5H,MAAQ,MACrB6H,SACAC,eACAF,SAAW,GACXC,SAAWF,SAASC,UAAUxJ,cAAc,sBAC5C0J,eAAiBH,SAASC,UAAUxJ,cAAc,6BAElDyJ,SAAWF,SAAS,GAAGvJ,cAAc,sBACrC0J,eAAiBH,SAAS,GAAGvJ,cAAc,4BAE/CyJ,SAASE,YAAY7J,YAGf8J,QAAUzJ,IAAIkB,wBACdwI,mBAAqBH,eAAerI,wBAC1CiI,MAAMQ,MAAMvI,IAAMqI,QAAQrI,IAAMsI,mBAAmBtI,IAAM,UACpDwI,sBAAsB/F,IAAI9C,QAAQU,OAO3CkF,4BACUkD,UAAYjK,SAASC,cAAc,4CACnCF,KAAOC,SAASC,cAAc,kCACpCgK,UAAUL,YAAY7J,8BAQF0F,kBACd1F,KAAOC,SAASC,cAAc,kCAC9BiK,gBAAkBnK,KAAKE,cAAc,wBACrCkK,eAAiBpK,KAAKE,cAAc,qBACpCmK,oBAAsBrK,KAAKE,cAAc,kBACzCoK,wBAA0BtK,KAAKE,cAAc,oBAC7CqK,iBAAmBvK,KAAKE,cAAc,YAE5CmK,oBAAoBxF,MAAQa,WAAWxD,GACvCoI,wBAAwBzF,MAAQa,WAAWd,KAC3CuF,gBAAgBtF,MAAQa,WAAWd,WAG7B4F,QAAUD,iBAAiB1F,MAAM4F,MAAM,KACxCD,QAAQxB,SAAStD,WAAWxD,MAC7BsI,QAAQzE,KAAKL,WAAWxD,IACxBqI,iBAAiB1F,MAAQ2F,QAAQE,KAAK,MAE1CN,eAAeO,oCAKT3K,KAAOC,SAASC,cAAc,kCAC9BkH,MAAQpH,KAAKE,cAAc,UAAU2E,MACrC+F,aAAe5K,KAAKE,cAAc,kBAAkB2E,MACpDgG,gBAAkB7K,KAAKE,cAAc,qBAAqB2E,MAE1Da,WAAa,CACfxD,GAAI0I,aACJhG,KAHmB5E,KAAKE,cAAc,oBAAoB2E,MAI1DiG,WAAYD,iBAEV3G,IAAM1B,KAAKiG,OAAOrB,OAElB2D,gBAAkB7G,IAAIuB,YAAY2C,WAAU4C,GAAKA,EAAE9I,IAAMwD,WAAWxD,KACpEgI,UAAYjK,SAASC,cACvB,kCAAoCkH,MAAQ,4CAC1C6D,kBAAoBjL,KAAKE,cAAc,2CACzC6K,iBAAmB,EAAG,CACtB7G,IAAIuB,YAAYsF,iBAAmBrF,iBAC7BwF,SAAWhB,UAAUhK,cAAc,aAAewF,WAAWxD,GAAK,MAClE4C,SAAWmG,kBAAkB/K,cAAc,aAAewF,WAAWxD,GAAK,OAC1EiJ,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2C5F,kBACzF2F,mBAAUE,YAAYL,SAAUC,KAAMC,UACtCC,mBAAUE,YAAYzG,SAAUqG,KAAMC,QAEzC,CACHlH,IAAIuB,YAAYM,KAAKL,kBACfyF,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2C5F,kBACzF2F,mBAAUG,mBAAmBtB,UAAWiB,KAAMC,UAC9CC,mBAAUG,mBAAmBP,kBAAmBE,KAAMC,SAE3DxI,2CAQmBwE,aAElB3B,YADMjD,KAAKiG,OAAOrB,OACA3B,YAElByE,UADOjK,SAASC,cAAc,kCACbA,cAAc,wCACrCgK,UAAUX,UAAY,GACtB9D,YAAY3B,SAAQkC,MAAAA,mBACVmF,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2C5F,+BACrF8F,mBAAmBtB,UAAWiB,KAAMC,8BAS/B/K,WAEb+G,MADOnH,SAASC,cAAc,kCACjBA,cAAc,UAAU2E,MACrC+F,aAAevK,IAAIE,QAAQ,aAAaa,QAAQc,GAChDgC,IAAM1B,KAAKiG,OAAOrB,OAClBtF,MAAQoC,IAAIuB,YAAY2C,WAAU4C,GAAKA,EAAE9I,IAAM0I,eACrD1G,IAAIuB,YAAY6B,OAAOxF,MAAO,SACxBoI,UAAYjK,SAASC,cACvB,kCAAoCkH,MAAQ,4CAC1C6D,kBAAoBhL,SAASC,cAAc,wCAC3CwF,WAAawE,UAAUhK,cAAc,aAAe0K,aAAe,MACnE9F,SAAWmG,kBAAkB/K,cAAc,aAAe0K,aAAe,MAC/EV,UAAUuB,YAAY/F,YACtBuF,kBAAkBQ,YAAY3G,eACzBlC,eAQT7B,SAASX,SACCsL,aAAetL,EAAEE,OAAOC,QAAQ,cAAca,QAAQU,MACtD6J,cAAgBvL,EAAEE,OAAOC,QAAQ,eAAea,QAAQ8G,SACxD0D,QAAU3L,SAAS4I,iBAAiB,kBACrC,IAAIgD,EAAI,EAAGA,EAAID,QAAQpI,OAAQqI,OAC5BD,QAAQC,GAAGzK,QAAQU,OAAS4J,aAAc,IAC5B,cAAVtL,EAAEU,KAAuB+K,EAAID,QAAQpI,OAAS,EAAG,OAC3CsI,UAAYF,QAAQC,EAAI,GAAG3L,wCAAiCyL,2BAC9DG,WACAA,UAAUnB,WAGJ,YAAVvK,EAAEU,KAAqB+K,EAAI,EAAG,OACxBE,cAAgBH,QAAQC,EAAI,GAAG3L,wCAAiCyL,2BAClEI,eACAA,cAAcpB,YAMhB,eAAVvK,EAAEU,IAAsB,OAClBkL,WAAa5L,EAAEE,OAAOC,QAAQ,eAAe0L,mBAC/CD,YACAA,WAAWrB,WAGL,cAAVvK,EAAEU,IAAqB,OACjBoL,eAAiB9L,EAAEE,OAAOC,QAAQ,eAAeyB,uBACnDkK,gBACAA,eAAevB,uBAgBhB,CACXwB,KALS,CAACxM,QAASC,gBACfH,QAAQE,QAASC"}