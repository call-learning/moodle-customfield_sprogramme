define("customfield_sprogramme/manager",["exports","customfield_sprogramme/local/state","customfield_sprogramme/local/repository","core/templates","core/notification","core/str","core/utils","./local/components/table"],(function(_exports,_state,_repository,_templates,_notification,_str,_utils,_table){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_state=_interopRequireDefault(_state),_repository=_interopRequireDefault(_repository),_templates=_interopRequireDefault(_templates),_notification=_interopRequireDefault(_notification);class Manager{constructor(courseid){_defineProperty(this,"rowNumber",0),_defineProperty(this,"courseid",void 0),_defineProperty(this,"table","customfield_sprogramme"),this.courseid=parseInt(courseid),this.addEventListeners(),this.getDatagrid()}async getDatagrid(){await this.getTableConfig(),await this.getTableData()}async getTableConfig(){try{const response=await _repository.default.getColumns({table:this.table}),json=this.parseResponse(response);json?await _state.default.setValue("columns",json):_notification.default.exception("The response is not valid JSON")}catch(error){_notification.default.exception(error)}}getDisciplines(){return _repository.default.getDisciplines()}async getTableData(){try{const response=await _repository.default.getData({courseid:this.courseid});if(response.rows.length>0){const rows=this.parseRows(response.rows);_state.default.setValue("rows",rows)}else{const row=await this.createRow(0);_state.default.setValue("rows",[row]),this.resetRowSortorder()}}catch(error){_notification.default.exception(error)}}parseRows(rows){const columns=_state.default.getValue("columns");return rows.map((row=>(row.cells=row.cells.map((cell=>{const column=columns.find((column=>column.column==cell.column));return(cell=Object.assign({},cell,column))[cell.type]=!0,cell.edit=!0,cell})),row)))}getRowObject(){return{rows:{id:"id",sortorder:"sortorder",cells:{type:"type",column:"column",value:"value"},disciplines:{id:"id",name:"name",percentage:"percentage"}}}}cleanRows(rows){const rowObject=this.getRowObject();return rows.map((row=>{const cleanedRow={};return Object.keys(rowObject.rows).forEach((key=>{cleanedRow[key]=row[key]})),cleanedRow.cells=row.cells.map((cell=>{const cleanedCell={};return Object.keys(rowObject.rows.cells).forEach((key=>{cleanedCell[key]=cell[key]})),cleanedCell})),cleanedRow.disciplines=row.disciplines.map((discipline=>{const cleanedDiscipline={};return Object.keys(rowObject.rows.disciplines).forEach((key=>{cleanedDiscipline[key]=discipline[key]})),cleanedDiscipline})),cleanedRow}))}async setTableData(){(0,_utils.debounce)((async()=>{try{const rows=_state.default.getValue("rows");await _repository.default.setData({courseid:this.courseid,rows:this.cleanRows(rows)})||_notification.default.exception("No response from the server")}catch(error){_notification.default.exception("Error 2"+error)}}),600)()}async createRow(index){const rowid=await _repository.default.createRow({courseid:this.courseid,sortorder:index});return new Promise((resolve=>{const row={};row.id=rowid,row.sortorder=index;const columns=_state.default.getValue("columns");void 0!==columns?(row.cells=columns.map((column=>structuredClone(column))),row.cells.forEach((cell=>{cell.edit=!0,cell.value="",cell[cell.type]=!0})),resolve(row)):resolve()}))}async delete(btn){const rowid=btn.closest("[data-row]").dataset.index,response=await _repository.default.deleteRow({courseid:this.courseid,rowid:rowid});return new Promise((resolve=>{if(response){const rows=_state.default.getValue("rows"),index=Array.from(btn.closest('[data-region="rows"]').children).indexOf(btn.closest("[data-row]"));rows.splice(index,1),this.resetRowSortorder(),_state.default.setValue("rows",rows)}resolve(rowid)}))}resetRowSortorder(){const rows=_state.default.getValue("rows");rows.forEach(((row,index)=>{row.sortorder=index})),_state.default.setValue("rows",rows)}addEventListeners(){const app=document.querySelector("."+this.table);app.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),app.addEventListener("change",(e=>{const input=e.target.closest("[data-input]");input&&this.change(input)})),app.addEventListener("keydown",(e=>{"ArrowDown"!==e.key&&"ArrowUp"!==e.key||this.navigate(e)}));document.querySelector('[data-region="disciplineform"]').querySelector('input[type="search"]').addEventListener("input",(e=>{const input=e.target.closest("input");input&&this.typeahead(input)}))}typeahead(input){const value=input.value;document.querySelector('[data-region="disciplineform"]').querySelectorAll("[data-option]").forEach((option=>{this.removeMatchBold(option),option.textContent.toLowerCase().includes(value.toLowerCase())?(option.classList.remove("d-none"),this.makeMatchBold(option,value)):option.classList.add("d-none")}))}makeMatchBold(option,value){const text=option.textContent,index=text.toLowerCase().indexOf(value.toLowerCase()),first=text.slice(0,index),match=text.slice(index,index+value.length),last=text.slice(index+value.length);option.innerHTML=first+"<strong>"+match+"</strong>"+last}removeMatchBold(option){option.innerHTML=option.textContent}actions(btn){if("add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action&&(this.save(),this.stopEdit()),"delete"===btn.dataset.action&&this.delete(btn),"adddisc"===btn.dataset.action&&this.showDisciplineForm(btn),"removedisc"===btn.dataset.action&&this.removeDiscipline(btn),"closedisciplineform"===btn.dataset.action&&this.closeDisciplineForm(),"selectdiscipline"===btn.dataset.action){const option=btn.closest("[data-option]"),discipline={id:option.dataset.id,name:option.textContent};this.setDisciplineForm(discipline)}"discipline-confirm"===btn.dataset.action&&this.addDiscipline()}change(input){const row=input.closest("[data-row]"),cell=input.closest("[data-cell]"),value=input.value,columnid=cell.dataset.columnid,index=row.dataset.index,rows=_state.default.getValue("rows"),rowIndex=rows.findIndex((r=>r.id==index)),cellIndex=rows[rowIndex].cells.findIndex((c=>c.columnid==columnid));rows[rowIndex].cells[cellIndex].value=value,this.setTableData()}async add(btn){const rows=_state.default.getValue("rows"),tablerows=document.querySelectorAll('[data-region="rows"] [data-row]'),index=Array.from(tablerows).indexOf(btn.closest("[data-row]")),row=await this.createRow(index+1);rows.splice(index+1,0,row),this.resetRowSortorder(),_state.default.setValue("rows",rows)}async showDisciplineForm(btn){const row=btn.closest("[data-row]"),form=document.querySelector('[data-region="disciplineform"]');form.querySelector("#rowid").value=row.dataset.index;const arrow=form.querySelector(".formarrow"),rows=document.querySelectorAll('[data-region="rows"] [data-row]'),rowArray=Array.from(rows),index=rowArray.indexOf(row);form.querySelector('[data-region="rownumber"]').textContent=await(0,_str.getString)("row","customfield_sprogramme",index+1);const setindex=index-8;let attachTo,attachToButton;setindex>0?(attachTo=rowArray[setindex].querySelector("[data-disciplines]"),attachToButton=rowArray[setindex].querySelector('[data-action="adddisc"]')):(attachTo=rowArray[0].querySelector("[data-disciplines]"),attachToButton=rowArray[0].querySelector('[data-action="adddisc"]')),attachTo.appendChild(form);const rectBtn=btn.getBoundingClientRect(),rectAttachToButton=attachToButton.getBoundingClientRect();arrow.style.top=rectBtn.top-rectAttachToButton.top+"px",this.renderFormDisciplines(row.dataset.index)}closeDisciplineForm(){const container=document.querySelector('[data-region="disciplineform-container"]'),form=document.querySelector('[data-region="disciplineform"]');container.appendChild(form)}async setDisciplineForm(discipline){const form=document.querySelector('[data-region="disciplineform"]'),formFieldSearch=form.querySelector('input[type="search"]'),formFieldValue=form.querySelector("#discipline-value"),formFieldDiscipline=form.querySelector("#discipline-id"),formFieldDisciplineName=form.querySelector("#discipline-name"),formFieldLastIds=form.querySelector("#lastids");formFieldDiscipline.value=discipline.id,formFieldDisciplineName.value=discipline.name,formFieldSearch.value=discipline.name;const lastIds=formFieldLastIds.value.split(",");lastIds.includes(discipline.id)||(lastIds.push(discipline.id),formFieldLastIds.value=lastIds.join(",")),formFieldValue.focus()}async addDiscipline(){const form=document.querySelector('[data-region="disciplineform"]'),rowid=form.querySelector("#rowid").value,disciplineid=form.querySelector("#discipline-id").value,disciplinevalue=form.querySelector("#discipline-value").value,discipline={id:disciplineid,name:form.querySelector("#discipline-name").value,percentage:disciplinevalue},row=_state.default.getValue("rows").find((r=>r.id==rowid)),disciplineIndex=row.disciplines.findIndex((d=>d.id==discipline.id)),container=document.querySelector('[data-disciplines][data-rowid="'+rowid+'"] [data-region="container-disciplines"]'),selectedcontainer=form.querySelector('[data-region="selected-disciplines"]');if(disciplineIndex>-1){row.disciplines[disciplineIndex]=discipline;const rendered=container.querySelector('[data-id="'+discipline.id+'"]'),selected=selectedcontainer.querySelector('[data-id="'+discipline.id+'"]'),{html:html,js:js}=await _templates.default.renderForPromise("customfield_sprogramme/table/discipline",discipline);await _templates.default.replaceNode(rendered,html,js),await _templates.default.replaceNode(selected,html,js)}else{row.disciplines.push(discipline);const{html:html,js:js}=await _templates.default.renderForPromise("customfield_sprogramme/table/discipline",discipline);await _templates.default.appendNodeContents(container,html,js),await _templates.default.appendNodeContents(selectedcontainer,html,js)}this.setTableData()}async renderFormDisciplines(rowid){const disciplines=_state.default.getValue("rows").find((r=>r.id==rowid)).disciplines,container=document.querySelector('[data-region="disciplineform"]').querySelector('[data-region="selected-disciplines"]');container.innerHTML="",disciplines.forEach((async discipline=>{const{html:html,js:js}=await _templates.default.renderForPromise("customfield_sprogramme/table/discipline",discipline);_templates.default.appendNodeContents(container,html,js)}))}async removeDiscipline(btn){const rowid=document.querySelector('[data-region="disciplineform"]').querySelector("#rowid").value,disciplineid=btn.closest("[data-id]").dataset.id,row=_state.default.getValue("rows").find((r=>r.id==rowid)),index=row.disciplines.findIndex((d=>d.id==disciplineid));row.disciplines.splice(index,1);const container=document.querySelector('[data-disciplines][data-rowid="'+rowid+'"] [data-region="container-disciplines"]'),selectedcontainer=document.querySelector('[data-region="selected-disciplines"]'),discipline=container.querySelector('[data-id="'+disciplineid+'"]'),selected=selectedcontainer.querySelector('[data-id="'+disciplineid+'"]');container.removeChild(discipline),selectedcontainer.removeChild(selected),this.setTableData()}parseResponse(response){if("string"==typeof response.data)try{const Json=JSON.parse(response.data);return Json.forEach((column=>{column[column.type]=!0})),Json}catch(error){return}}navigate(e){const currentIndex=e.target.closest("[data-row]").dataset.index,currentColumn=e.target.closest("[data-cell]").dataset.columnid,allRows=document.querySelectorAll("[data-row]");for(let i=0;i<allRows.length;i++)if(allRows[i].dataset.index==currentIndex){if("ArrowDown"===e.key&&i<allRows.length-1){const nextInput=allRows[i+1].querySelector('[data-columnid="'.concat(currentColumn,'"]'));nextInput&&nextInput.focus()}if("ArrowUp"===e.key&&i>0){const previousInput=allRows[i-1].querySelector('[data-columnid="'.concat(currentColumn,'"]'));previousInput&&previousInput.focus()}}if("ArrowRight"===e.key){const nextColumn=e.target.closest("[data-cell]").nextElementSibling;nextColumn&&nextColumn.focus()}if("ArrowLeft"===e.key){const previousColumn=e.target.closest("[data-cell]").previousElementSibling;previousColumn&&previousColumn.focus()}}}var _default={init:courseid=>{new Manager(courseid)}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=manager.min.js.map