define("customfield_sprogramme/nixen",["exports","customfield_sprogramme/local/state","customfield_sprogramme/local/repository","core/notification","core/utils","./local/components/table"],(function(_exports,_state,_repository,_notification,_utils,_table){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_state=_interopRequireDefault(_state),_repository=_interopRequireDefault(_repository),_notification=_interopRequireDefault(_notification);class Nixen{constructor(){_defineProperty(this,"rowNumber",0),_defineProperty(this,"dataset","columns_small"),this.addEventListeners(),this.getDatagrid()}async getDatagrid(){await this.getTableConfig(),await this.getTableData()}async getTableConfig(){try{const response=await _repository.default.getJsonData({filename:this.dataset}),json=this.parseResponse(response);json?await _state.default.setValue("columns",json):_notification.default.exception("The response is not valid JSON")}catch(error){_notification.default.exception(error)}}async getTableData(){try{const response=await _repository.default.getData({dataset:this.dataset}),json=this.parseResponse(response);if(json)_state.default.setValue("rows",json);else{const row=await this.createRow();_state.default.setValue("rows",[row]),this.resetRowSortorder()}}catch(error){_notification.default.exception(error)}}getRowObject(){return{rows:{id:"id",sortorder:"sortorder",cells:{type:"type",columnid:"columnid",value:"value"}}}}cleanRows(rows){const rowObject=this.getRowObject(),cleanedRows=rows.map((row=>{const cleanedRow={};return Object.keys(rowObject.rows).forEach((key=>{cleanedRow[key]=row[key]})),cleanedRow.cells=row.cells.map((cell=>{const cleanedCell={};return Object.keys(rowObject.rows.cells).forEach((key=>{cleanedCell[key]=cell[key]})),cleanedCell})),cleanedRow}));return window.console.log(JSON.stringify(cleanedRows)),cleanedRows}async setTableData(){(0,_utils.debounce)((async()=>{try{const rows=_state.default.getValue("rows");await _repository.default.setData({dataset:this.dataset,rows:this.cleanRows(rows)})||_notification.default.exception("No response from the server")}catch(error){_notification.default.exception("Error 2"+error)}}),600)()}createRow(){return new Promise((resolve=>{this.rowNumber++;const row={};row.id=this.rowNumber;const columns=_state.default.getValue("columns");void 0!==columns?(row.cells=columns.map((column=>structuredClone(column))),row.cells.forEach((cell=>{cell.edit=!0,cell.value="",cell[cell.type]=!0})),resolve(row)):resolve()}))}resetRowSortorder(){const rows=_state.default.getValue("rows");rows.forEach(((row,index)=>{row.sortorder=index})),_state.default.setValue("rows",rows)}addEventListeners(){document.addEventListener("click",(e=>{let btn=e.target.closest("[data-action]");btn&&(e.preventDefault(),this.actions(btn))})),document.addEventListener("change",(e=>{const input=e.target.closest("[data-input]");input&&this.change(input)}))}actions(btn){"add"===btn.dataset.action&&this.add(btn),"edit"===btn.dataset.action&&this.edit(btn),"save"===btn.dataset.action&&(this.save(),this.stopEdit()),"delete"===btn.dataset.action&&this.delete(btn),this.setTableData()}change(input){const row=input.closest("[data-row]"),cell=input.closest("[data-cell]"),value=input.value,columnid=cell.dataset.columnid,index=row.dataset.index,rows=_state.default.getValue("rows"),rowIndex=rows.findIndex((r=>r.id==index)),cellIndex=rows[rowIndex].cells.findIndex((c=>c.columnid==columnid));rows[rowIndex].cells[cellIndex].value=value,this.setTableData()}async add(btn){const rows=_state.default.getValue("rows"),tablerows=document.querySelectorAll('[data-region="rows"] [data-row]'),index=Array.from(tablerows).indexOf(btn.closest("[data-row]")),row=await this.createRow();rows.splice(index+1,0,row),this.resetRowSortorder(),_state.default.setValue("rows",rows)}parseResponse(response){if("string"==typeof response.data)try{return JSON.parse(response.data)}catch(error){return}}}var _default={init:()=>{new Nixen}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=nixen.min.js.map