{"version":3,"file":"repository.min.js","sources":["../../src/local/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Gateway to the webservices.\n *\n * @module     customfield_sprogramme/local/repository\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n\n/**\n * Competvet repository class.\n */\nclass Repository {\n\n    /**\n     * Get JSON data\n     * @param {Object} args The data to get.\n     * @return {Promise} The promise.\n     */\n    getColumns(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_get_columns',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the Table data.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    getData(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_get_data',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Set the Table data.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    setData(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_set_data',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Create a new row.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    createRow(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_create_row',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Create a new module.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    createModule(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_create_module',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete a module.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    deleteModule(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_delete_module',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Delete a row.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    deleteRow(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_delete_row',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Update the sort order.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    updateSortOrder(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_update_sort_order',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n\n    /**\n     * Get the CSV data for download.\n     * @param {Object} args The arguments.\n     * @return {Promise} The promise.\n     */\n    csvData(args) {\n        const request = {\n            methodname: 'customfield_sprogramme_csv_data',\n            args: args\n        };\n\n        let promise = Ajax.call([request])[0]\n            .fail(Notification.exception);\n\n        return promise;\n    }\n}\n\nconst RepositoryInstance = new Repository();\n\nexport default RepositoryInstance;\n"],"names":["getColumns","args","request","methodname","Ajax","call","fail","Notification","exception","getData","setData","createRow","createModule","deleteModule","deleteRow","updateSortOrder","csvData"],"mappings":";;;;;;;0LA0L2B,UArJvBA,WAAWC,YACDC,QAAU,CACZC,WAAY,qCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BC,QAAQR,YACEC,QAAU,CACZC,WAAY,kCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BE,QAAQT,YACEC,QAAU,CACZC,WAAY,kCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BG,UAAUV,YACAC,QAAU,CACZC,WAAY,oCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BI,aAAaX,YACHC,QAAU,CACZC,WAAY,uCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BK,aAAaZ,YACHC,QAAU,CACZC,WAAY,uCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BM,UAAUb,YACAC,QAAU,CACZC,WAAY,oCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BO,gBAAgBd,YACNC,QAAU,CACZC,WAAY,2CACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC,WAU3BQ,QAAQf,YACEC,QAAU,CACZC,WAAY,kCACZF,KAAMA,aAGIG,cAAKC,KAAK,CAACH,UAAU,GAC9BI,KAAKC,sBAAaC"}