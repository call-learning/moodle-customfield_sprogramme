{"version":3,"file":"state.min.js","sources":["../../src/local/state.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A reactive state class that stores the data for the competvet module.\n *\n * @module     customfield_sprogramme/local/state\n * @copyright  2024 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * A simple state class that stores the data for the competvet module.\n * Classes can subscribe to this class to get updates.\n */\nclass State {\n    /**\n     * Constructor.\n     */\n    constructor() {\n        this.data = {};\n        this.subscribers = [];\n    }\n\n    /**\n     * Set the data.\n     * @param {Object} data The data.\n     * @return {Promise} The promise.\n     */\n    setData(data) {\n        return new Promise((resolve) => {\n            this.data = data;\n            this.notifySubscribers();\n            this.debug();\n            resolve();\n        });\n    }\n\n    /**\n     * Set a single value.\n     * @param {String} key The key.\n     * @param {String} value The value.\n     * @return {Promise} The promise.\n     */\n    async setValue(key, value) {\n        return new Promise((resolve) => {\n            this.data[key] = value;\n            this.notifySubscriber(key);\n            this.debug();\n            resolve();\n        });\n    }\n\n    /**\n     * Get a single value.\n     * @param {String} key The key.\n     * @return {String} The value.\n     */\n    getValue(key) {\n        return this.data[key];\n    }\n\n    /**\n     * Get the data.\n     * @return {Object} The data.\n     */\n    getData() {\n        return this.data;\n    }\n\n    /**\n     * Subscribe to the state.\n     * @param {String} key The key.\n     * @param {Function} callback The callback.\n     */\n    subscribe(key, callback) {\n        if (typeof key !== 'string') {\n            throw new Error('The key must be a string');\n        }\n        if (typeof callback !== 'function') {\n            throw new Error('The callback must be a function');\n        }\n\n        // Check if the key is already subscribed, with the same callback.\n        const exists = this.subscribers.find(subscriber => subscriber.key === key && subscriber.callback === callback);\n        if (exists) {\n            window.console.log('The key is already subscribed');\n            return;\n        }\n        this.subscribers.push({key, callback});\n    }\n\n    /**\n     * Unsubscribe from the state.\n     * @param {Function} callback The callback.\n     */\n    unsubscribe(callback) {\n        this.subscribers = this.subscribers.filter(subscriber => subscriber.callback !== callback);\n    }\n\n    /**\n     * Notify the subscribers, but only if the data key exists or has changed.\n     */\n    notifySubscribers() {\n        this.subscribers.forEach(subscriber => {\n            if (this.data[subscriber.key] !== undefined) {\n                subscriber.callback(this.data);\n            }\n        });\n    }\n\n    /**\n     * Notify a single subscriber.\n     * @param {String} key The key.\n     */\n    notifySubscriber(key) {\n        const subscriber = this.subscribers.find(subscriber => subscriber.key === key);\n        if (subscriber) {\n            subscriber.callback(this.data);\n        } else {\n            window.console.log(`The key ${key} is not subscribed`);\n        }\n    }\n\n    /**\n     * Debugging function.\n     */\n    debug() {\n        const debugRegion = document.getElementById('debug');\n        if (debugRegion) {\n            debugRegion.innerHTML = JSON.stringify(this.data, null, 2);\n        }\n    }\n}\n\nconst state = new State();\nexport default state;\n"],"names":["constructor","data","subscribers","setData","Promise","resolve","notifySubscribers","debug","key","value","notifySubscriber","getValue","this","getData","subscribe","callback","Error","find","subscriber","window","console","log","push","unsubscribe","filter","forEach","undefined","debugRegion","document","getElementById","innerHTML","JSON","stringify"],"mappings":"yKAmJc;;;;;;;;MApHVA,mBACSC,KAAO,QACPC,YAAc,GAQvBC,QAAQF,aACG,IAAIG,SAASC,eACXJ,KAAOA,UACPK,yBACAC,QACLF,4BAUOG,IAAKC,cACT,IAAIL,SAASC,eACXJ,KAAKO,KAAOC,WACZC,iBAAiBF,UACjBD,QACLF,aASRM,SAASH,YACEI,KAAKX,KAAKO,KAOrBK,iBACWD,KAAKX,KAQhBa,UAAUN,IAAKO,aACQ,iBAARP,UACD,IAAIQ,MAAM,+BAEI,mBAAbD,eACD,IAAIC,MAAM,mCAILJ,KAAKV,YAAYe,MAAKC,YAAcA,WAAWV,MAAQA,KAAOU,WAAWH,WAAaA,WAEjGI,OAAOC,QAAQC,IAAI,sCAGlBnB,YAAYoB,KAAK,CAACd,IAAAA,IAAKO,SAAAA,WAOhCQ,YAAYR,eACHb,YAAcU,KAAKV,YAAYsB,QAAON,YAAcA,WAAWH,WAAaA,WAMrFT,yBACSJ,YAAYuB,SAAQP,kBACaQ,IAA9Bd,KAAKX,KAAKiB,WAAWV,MACrBU,WAAWH,SAASH,KAAKX,SASrCS,iBAAiBF,WACPU,WAAaN,KAAKV,YAAYe,MAAKC,YAAcA,WAAWV,MAAQA,MACtEU,WACAA,WAAWH,SAASH,KAAKX,MAEzBkB,OAAOC,QAAQC,sBAAeb,2BAOtCD,cACUoB,YAAcC,SAASC,eAAe,SACxCF,cACAA,YAAYG,UAAYC,KAAKC,UAAUpB,KAAKX,KAAM,KAAM"}