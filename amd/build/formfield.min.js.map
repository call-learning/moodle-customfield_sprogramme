{"version":3,"file":"formfield.min.js","sources":["../src/formfield.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module formfield\n *\n * @module     customfield_sprogramme/formfield\n * @copyright  2025 Bas Brands <bas@sonsbeekmedia.nl>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Manager from 'customfield_sprogramme/manager';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport Repository from 'customfield_sprogramme/local/repository';\n/*\n * Initialise\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n */\nconst init = async(element, courseid) => {\n    element.addEventListener('click', async(event) => {\n        event.preventDefault();\n\n        await getProgramme(element, courseid);\n        const modalContent = document.querySelector('[data-region=\"app\"]');\n\n        const modal = await Modal.create({\n            large: true,\n            title: getString('editprogramme', 'customfield_sprogramme'),\n            body: modalContent,\n            show: true,\n        });\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            window.location.reload();\n        });\n\n        const saveButton = document.createElement('div');\n        const modalElement = modal.getModal()[0];\n        modalElement.classList.add('modal-customfield_sprogramme');\n        const header = modalElement.querySelector('[data-region=\"header\"]');\n        const title = modalElement.querySelector('[data-region=\"title\"]');\n        if (title) {\n            // Add the icone after the title Element.\n            header.insertBefore(saveButton, title.nextSibling);\n        }\n\n        const {html, js} = await Templates.renderForPromise('customfield_sprogramme/table/savebutton', {courseid: courseid});\n        await Templates.replaceNode(saveButton, html, js);\n        const closeButton = header.querySelector('[data-action=\"closeform\"]');\n        closeButton.addEventListener('click', () => {\n            modal.hide();\n        });\n        const downloadButton = header.querySelector('[data-action=\"programme-download-csv\"]');\n        downloadButton.addEventListener('click', async(event) => {\n            downloadCSV(courseid);\n            event.preventDefault();\n        });\n        const renderedSaveButton = header.querySelector('[data-action=\"saveconfirm\"]');\n        renderedSaveButton.addEventListener('click', async(event) => {\n            // Run the 'saveconfirm' custom event.\n            const saveEvent = new CustomEvent('saveconfirm', {bubbles: true});\n            document.dispatchEvent(saveEvent);\n            event.preventDefault();\n        });\n\n    });\n};\n\nconst downloadCSV = async(courseid) => {\n    const csv = await Repository.csvData({courseid: courseid});\n    const blob = new Blob([csv.csv], {type: 'text/csv'});\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = csv.filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n};\n\n\n/**\n * Get the programme.\n * @param {HTMLElement} element The element.\n * @param {String} courseid The courseid.\n * @return {Promise} The programme.\n */\nconst getProgramme = async(element, courseid) => {\n    Manager.init(element, courseid);\n};\n\nexport default {\n    init: init,\n};"],"names":["downloadCSV","async","csv","Repository","csvData","courseid","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","filename","click","revokeObjectURL","getProgramme","element","init","addEventListener","event","preventDefault","modalContent","querySelector","modal","Modal","create","large","title","body","show","getRoot","on","ModalEvents","hidden","location","reload","saveButton","modalElement","getModal","classList","add","header","insertBefore","nextSibling","html","js","Templates","renderForPromise","replaceNode","hide","saveEvent","CustomEvent","bubbles","dispatchEvent"],"mappings":";;;;;;;6TAkFMA,YAAcC,MAAAA,iBACVC,UAAYC,oBAAWC,QAAQ,CAACC,SAAUA,WAC1CC,KAAO,IAAIC,KAAK,CAACL,IAAIA,KAAM,CAACM,KAAM,aAClCC,IAAMC,OAAOC,IAAIC,gBAAgBN,MACjCO,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOP,IACTI,EAAEI,SAAWf,IAAIgB,SACjBL,EAAEM,QACFT,OAAOC,IAAIS,gBAAgBX,MAUzBY,aAAepB,MAAMqB,QAASjB,6BACxBkB,KAAKD,QAASjB,wBAGX,CACXkB,KAxEStB,MAAMqB,QAASjB,YACxBiB,QAAQE,iBAAiB,SAASvB,MAAAA,QAC9BwB,MAAMC,uBAEAL,aAAaC,QAASjB,gBACtBsB,aAAeb,SAASc,cAAc,uBAEtCC,YAAcC,eAAMC,OAAO,CAC7BC,OAAO,EACPC,OAAO,kBAAU,gBAAiB,0BAClCC,KAAMP,aACNQ,MAAM,IAEVN,MAAMO,UAAUC,GAAGC,sBAAYC,QAAQ,KACnC7B,OAAO8B,SAASC,kBAGdC,WAAa5B,SAASC,cAAc,OACpC4B,aAAed,MAAMe,WAAW,GACtCD,aAAaE,UAAUC,IAAI,sCACrBC,OAASJ,aAAaf,cAAc,0BACpCK,MAAQU,aAAaf,cAAc,yBACrCK,OAEAc,OAAOC,aAAaN,WAAYT,MAAMgB,mBAGpCC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,0CAA2C,CAAChD,SAAUA,iBACpG+C,mBAAUE,YAAYZ,WAAYQ,KAAMC,IAC1BJ,OAAOnB,cAAc,6BAC7BJ,iBAAiB,SAAS,KAClCK,MAAM0B,UAEaR,OAAOnB,cAAc,0CAC7BJ,iBAAiB,SAASvB,MAAAA,QACrCD,YAAYK,UACZoB,MAAMC,oBAEiBqB,OAAOnB,cAAc,+BAC7BJ,iBAAiB,SAASvB,MAAAA,cAEnCuD,UAAY,IAAIC,YAAY,cAAe,CAACC,SAAS,IAC3D5C,SAAS6C,cAAcH,WACvB/B,MAAMC"}